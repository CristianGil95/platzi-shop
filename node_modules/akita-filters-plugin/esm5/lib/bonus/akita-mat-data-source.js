/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DataSource } from '@angular/cdk/table';
import { BehaviorSubject, combineLatest, merge, of, Subject, Subscription } from 'rxjs';
import { Order } from '@datorama/akita';
import { AkitaFiltersPlugin } from '../akita-filters-plugin';
import { map, takeUntil } from 'rxjs/operators';
/**
 * @template S, E
 */
var /**
 * @template S, E
 */
AkitaMatDataSource = /** @class */ (function (_super) {
    tslib_1.__extends(AkitaMatDataSource, _super);
    /**
     * Data source to use an Akita EntityStore with a Material table
     * @see : https://material.angular.io/components/table/overview
     *
     * @param query string : [Mandatory] the akita Query Entity, you wan to use to this data source.
     * @param akitaFilters string [Optional] If you want to provide an AkitaFilters that you use externally. Else it will create a new one.
     */
    function AkitaMatDataSource(query, akitaFilters) {
        var _this = _super.call(this) || this;
        _this._paginator = null;
        _this._sort = null;
        /**
         * Used to react to internal changes of the paginator that are made by the data source itself.
         */
        _this._internalPageChanges = new Subject();
        /**
         * Stream emitting render data to the table (depends on ordered data changes).
         */
        _this._renderData = new BehaviorSubject([]);
        /**
         * Used to react to internal changes of the paginator that are made by the data source itself.
         */
        _this._disconnect = new Subject();
        /**
         * Subscription to the changes that should trigger an update to the table's rendered rows, such
         * as filtering, sorting, pagination, or base data changes.
         */
        _this._renderChangesSubscription = Subscription.EMPTY;
        _this._dataQuery = query;
        _this._filters = akitaFilters ? akitaFilters : new AkitaFiltersPlugin(query);
        _this._hasCustomFilters = !!akitaFilters;
        _this._count$ = new BehaviorSubject(0);
        /** @type {?} */
        var count = 0;
        // @ts-ignore ignore, as without options, we will allways have an Array.
        _this._selectAllByFilter$ = _this._filters.selectAllByFilters();
        _this._updateChangeSubscription();
        return _this;
    }
    Object.defineProperty(AkitaMatDataSource.prototype, "filter", {
        /**
         * @param searchQuery teh string use to search
         */
        set: /**
         * @param {?} searchQuery teh string use to search
         * @return {?}
         */
        function (searchQuery) {
            this.search = searchQuery;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AkitaMatDataSource.prototype, "search", {
        /**
         * filter all the list by a search term.
         *
         * use like a property :
         * akitaMatDataSourceInstance.search = 'term';
         * @param searchQuery the string use to search
         */
        set: /**
         * filter all the list by a search term.
         *
         * use like a property :
         * akitaMatDataSourceInstance.search = 'term';
         * @param {?} searchQuery the string use to search
         * @return {?}
         */
        function (searchQuery) {
            if (searchQuery === '') {
                this._filters.removeFilter('search');
            }
            else {
                this._filters.setFilter({ id: 'search', value: searchQuery });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AkitaMatDataSource.prototype, "sort", {
        /**
         * Instance of the MatSort directive used by the table to control its sorting. Sort changes
         * emitted by the MatSort will trigger an update to the table's rendered data.
         */
        set: /**
         * Instance of the MatSort directive used by the table to control its sorting. Sort changes
         * emitted by the MatSort will trigger an update to the table's rendered data.
         * @param {?} sort
         * @return {?}
         */
        function (sort) {
            var _this = this;
            this._sort = sort;
            sort.sortChange.pipe(takeUntil(this._disconnect)).subscribe((/**
             * @param {?} sortValue
             * @return {?}
             */
            function (sortValue) {
                _this._filters.setSortBy({
                    sortBy: (/** @type {?} */ (sortValue.active)),
                    sortByOrder: sortValue.direction === 'desc' ? Order.DESC : Order.ASC
                });
            }));
            sort.initialized.subscribe((/**
             * @return {?}
             */
            function () {
                _this.setDefaultSort((/** @type {?} */ (sort.active)), sort.direction === 'desc' ? Order.DESC : Order.ASC);
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AkitaMatDataSource.prototype, "paginator", {
        /**
         * Instance of the MatPaginator component used by the table to control what page of the data is
         * displayed. Page changes emitted by the MatPaginator will trigger an update to the
         * table's rendered data.
         *
         * Note that the data source uses the paginator's properties to calculate which page of data
         * should be displayed. If the paginator receives its properties as template inputs,
         * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been
         * initialized before assigning it to this data source.
         */
        get: /**
         * Instance of the MatPaginator component used by the table to control what page of the data is
         * displayed. Page changes emitted by the MatPaginator will trigger an update to the
         * table's rendered data.
         *
         * Note that the data source uses the paginator's properties to calculate which page of data
         * should be displayed. If the paginator receives its properties as template inputs,
         * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been
         * initialized before assigning it to this data source.
         * @return {?}
         */
        function () {
            return this._paginator;
        },
        set: /**
         * @param {?} paginator
         * @return {?}
         */
        function (paginator) {
            this._paginator = paginator;
            this._updateChangeSubscription();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AkitaMatDataSource.prototype, "AkitaFilters", {
        /**
         * @deprecated use get akitaFiltersPlugin
         */
        get: /**
         * @deprecated use get akitaFiltersPlugin
         * @return {?}
         */
        function () {
            return this._filters;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AkitaMatDataSource.prototype, "akitaFiltersPlugIn", {
        /**
         * Access to AkitaFiltersPlugins, usefull to interact with all filters
         */
        get: /**
         * Access to AkitaFiltersPlugins, usefull to interact with all filters
         * @return {?}
         */
        function () {
            return this._filters;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    AkitaMatDataSource.prototype._updateCount = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var count = value.length ? value.length : 0;
        if (count !== this._count$.getValue()) {
            this._count$.next(count);
            this._updatePaginator(count);
        }
    };
    /**
     * Paginate the data (client-side). If you're using server-side pagination,
     * this would be replaced by requesting the appropriate data from the server.
     */
    /**
     * Paginate the data (client-side). If you're using server-side pagination,
     * this would be replaced by requesting the appropriate data from the server.
     * @private
     * @param {?} data
     * @return {?}
     */
    AkitaMatDataSource.prototype._pageData = /**
     * Paginate the data (client-side). If you're using server-side pagination,
     * this would be replaced by requesting the appropriate data from the server.
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this._updateCount(data);
        if (!this.paginator) {
            return data;
        }
        /** @type {?} */
        var startIndex = this.paginator.pageIndex * this.paginator.pageSize;
        return data.slice(startIndex, startIndex + this.paginator.pageSize);
    };
    /**
     *  add a filter to filters plugins
     */
    /**
     *  add a filter to filters plugins
     * @param {?} filter
     * @return {?}
     */
    AkitaMatDataSource.prototype.addFilter = /**
     *  add a filter to filters plugins
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        this._filters.setFilter(filter);
    };
    /**
     *  add a filter to filters plugins
     */
    /**
     *  add a filter to filters plugins
     * @param {?} filter
     * @return {?}
     */
    AkitaMatDataSource.prototype.setFilter = /**
     *  add a filter to filters plugins
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        this._filters.setFilter(filter);
    };
    /**
     * Remove a AkitaFilter
     */
    /**
     * Remove a AkitaFilter
     * @param {?} id
     * @return {?}
     */
    AkitaMatDataSource.prototype.removeFilter = /**
     * Remove a AkitaFilter
     * @param {?} id
     * @return {?}
     */
    function (id) {
        this._filters.removeFilter(id);
    };
    /**
     * Clear all filters
     */
    /**
     * Clear all filters
     * @return {?}
     */
    AkitaMatDataSource.prototype.clearFilters = /**
     * Clear all filters
     * @return {?}
     */
    function () {
        this._filters.clearFilters();
    };
    /**
     * Get filter value, return null, if value not available
     */
    /**
     * Get filter value, return null, if value not available
     * @template V
     * @param {?} id
     * @return {?}
     */
    AkitaMatDataSource.prototype.getFilterValue = /**
     * Get filter value, return null, if value not available
     * @template V
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this._filters.getFilterValue(id);
    };
    /**
     * Set the default sort
     * @param sortColumn the colum name present in your object
     * @param direction string the direction for sorting (asc or desc). Default asc.
     */
    /**
     * Set the default sort
     * @param {?} sortColumn the colum name present in your object
     * @param {?=} direction string the direction for sorting (asc or desc). Default asc.
     * @return {?}
     */
    AkitaMatDataSource.prototype.setDefaultSort = /**
     * Set the default sort
     * @param {?} sortColumn the colum name present in your object
     * @param {?=} direction string the direction for sorting (asc or desc). Default asc.
     * @return {?}
     */
    function (sortColumn, direction) {
        if (direction === void 0) { direction = 'asc'; }
        this._filters.setSortBy({
            sortBy: sortColumn,
            sortByOrder: direction === 'desc' ? Order.DESC : Order.ASC
        });
    };
    /**
     * Select Count filtered results.
     */
    /**
     * Select Count filtered results.
     * @return {?}
     */
    AkitaMatDataSource.prototype.selectCount = /**
     * Select Count filtered results.
     * @return {?}
     */
    function () {
        return this._count$.asObservable();
    };
    /**
     * Select Count filtered results.
     */
    /**
     * Select Count filtered results.
     * @return {?}
     */
    AkitaMatDataSource.prototype.getCount = /**
     * Select Count filtered results.
     * @return {?}
     */
    function () {
        return this._count$.getValue();
    };
    /**
     * Subscribe to changes that should trigger an update to the table's rendered rows. When the
     * changes occur, process the current state of the filter, sort, and pagination along with
     * the provided base data and send it to the table for rendering.
     */
    /**
     * Subscribe to changes that should trigger an update to the table's rendered rows. When the
     * changes occur, process the current state of the filter, sort, and pagination along with
     * the provided base data and send it to the table for rendering.
     * @return {?}
     */
    AkitaMatDataSource.prototype._updateChangeSubscription = /**
     * Subscribe to changes that should trigger an update to the table's rendered rows. When the
     * changes occur, process the current state of the filter, sort, and pagination along with
     * the provided base data and send it to the table for rendering.
     * @return {?}
     */
    function () {
        // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.
        // The events should emit whenever the component emits a change or initializes, or if no
        // component is provided, a stream with just a null event should be provided.
        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the
        // pipeline can progress to the next step. Note that the value from these streams are not used,
        // they purely act as a signal to progress in the pipeline.
        var _this = this;
        // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.
        // The events should emit whenever the component emits a change or initializes, or if no
        // component is provided, a stream with just a null event should be provided.
        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the
        // pipeline can progress to the next step. Note that the value from these streams are not used,
        // they purely act as a signal to progress in the pipeline.
        /** @type {?} */
        var pageChange = this._paginator ?
            (/** @type {?} */ (merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized))) :
            of(null);
        /** @type {?} */
        var paginatedData = combineLatest(this._selectAllByFilter$, pageChange)
            .pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 1), data = _b[0];
            return _this._pageData(data);
        })));
        // Watched for paged data changes and send the result to the table to render.
        this._renderChangesSubscription.unsubscribe();
        this._renderChangesSubscription = paginatedData.pipe(takeUntil(this._disconnect)).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return _this._renderData.next(data); }));
        this._internalPageChanges.next();
    };
    /**
     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page
     * index does not exceed the paginator's last page. Values are changed in a resolved promise to
     * guard against making property changes within a round of change detection.
     */
    /**
     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page
     * index does not exceed the paginator's last page. Values are changed in a resolved promise to
     * guard against making property changes within a round of change detection.
     * @param {?} filteredDataLength
     * @return {?}
     */
    AkitaMatDataSource.prototype._updatePaginator = /**
     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page
     * index does not exceed the paginator's last page. Values are changed in a resolved promise to
     * guard against making property changes within a round of change detection.
     * @param {?} filteredDataLength
     * @return {?}
     */
    function (filteredDataLength) {
        var _this = this;
        Promise.resolve().then((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var paginator = _this.paginator;
            if (!paginator) {
                return;
            }
            paginator.length = filteredDataLength;
            // If the page index is set beyond the page, reduce it to the last page.
            if (paginator.pageIndex > 0) {
                /** @type {?} */
                var lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;
                /** @type {?} */
                var newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);
                if (newPageIndex !== paginator.pageIndex) {
                    paginator.pageIndex = newPageIndex;
                    // Since the paginator only emits after user-generated changes,
                    // we need our own stream so we know to should re-render the data.
                    _this._internalPageChanges.next();
                }
            }
        }));
    };
    /**
     * Function used by matTable to subscribe to the data
     */
    /**
     * Function used by matTable to subscribe to the data
     * @return {?}
     */
    AkitaMatDataSource.prototype.connect = /**
     * Function used by matTable to subscribe to the data
     * @return {?}
     */
    function () {
        return this._renderData;
    };
    /**
     * Used by the MatTable. Called when it is destroyed. No-op.
     * @docs-private
     */
    /**
     * Used by the MatTable. Called when it is destroyed. No-op.
     * \@docs-private
     * @return {?}
     */
    AkitaMatDataSource.prototype.disconnect = /**
     * Used by the MatTable. Called when it is destroyed. No-op.
     * \@docs-private
     * @return {?}
     */
    function () {
        if (!this._hasCustomFilters) {
            this._filters.clearFilters();
            this._filters.destroy();
        }
        this._disconnect.next();
        this._disconnect.complete();
    };
    return AkitaMatDataSource;
}(DataSource));
/**
 * @template S, E
 */
export { AkitaMatDataSource };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._dataQuery;
    /**
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._filters;
    /**
     * if set a custom filter plugins, do not delete all in disconnect() *
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._hasCustomFilters;
    /**
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._paginator;
    /**
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._sort;
    /**
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._selectAllByFilter$;
    /**
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._count$;
    /**
     * Used to react to internal changes of the paginator that are made by the data source itself.
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._internalPageChanges;
    /**
     * Stream emitting render data to the table (depends on ordered data changes).
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._renderData;
    /**
     * Used to react to internal changes of the paginator that are made by the data source itself.
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._disconnect;
    /**
     * Subscription to the changes that should trigger an update to the table's rendered rows, such
     * as filtering, sorting, pagination, or base data changes.
     * @type {?}
     */
    AkitaMatDataSource.prototype._renderChangesSubscription;
}
//# sourceMappingURL=data:application/json;base64,