/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { AkitaFiltersStore, createFilter } from './akita-filters-store';
import { AkitaFiltersQuery } from './akita-filters-query';
import { combineLatest, isObservable, merge } from 'rxjs';
import { map } from 'rxjs/operators';
import { compareValues, EntityCollectionPlugin, isFunction, isUndefined } from '@datorama/akita';
/**
 * @record
 * @template S
 */
export function FiltersParams() { }
if (false) {
    /** @type {?|undefined} */
    FiltersParams.prototype.filtersStoreName;
    /** @type {?|undefined} */
    FiltersParams.prototype.entityIds;
    /* Skipping unhandled member: [key: string]: any;*/
}
/**
 * @record
 */
function NormalizedFilterOptions() { }
if (false) {
    /** @type {?|undefined} */
    NormalizedFilterOptions.prototype.withSort;
    /** @type {?|undefined} */
    NormalizedFilterOptions.prototype.asQueryParams;
    /** @type {?|undefined} */
    NormalizedFilterOptions.prototype.sortByKey;
    /** @type {?|undefined} */
    NormalizedFilterOptions.prototype.sortByOrderKey;
}
/**
 * @template S, E, I, P
 */
var /**
 * @template S, E, I, P
 */
AkitaFiltersPlugin = /** @class */ (function (_super) {
    tslib_1.__extends(AkitaFiltersPlugin, _super);
    function AkitaFiltersPlugin(query, params) {
        if (params === void 0) { params = {}; }
        var _this = _super.call(this, query, params.entityIds) || this;
        _this.query = query;
        _this.params = params;
        _this._server = false;
        _this.params = tslib_1.__assign({ filtersStoreName: _this.getStore().storeName + 'Filters' }, params);
        _this._filtersStore = new AkitaFiltersStore(_this.params.filtersStoreName);
        _this._filtersQuery = new AkitaFiltersQuery(_this._filtersStore);
        _this._selectFilters$ = _this.filtersQuery.selectAll({ sortBy: 'order' });
        _this._selectFiltersAll$ = _this.filtersQuery.selectAll({ sortBy: 'order', filterBy: (/**
             * @param {?} filter
             * @return {?}
             */
            function (filter) { return !filter.hide; }) });
        _this._selectSortBy$ = _this.filtersQuery.select((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return state && state.sort ? state.sort : null; }));
        return _this;
    }
    Object.defineProperty(AkitaFiltersPlugin.prototype, "filtersStore", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filtersStore;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AkitaFiltersPlugin.prototype, "filtersQuery", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filtersQuery;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *  Add support of filters from server. Provide a function that will be call each time a filter changes
     *
     *  new AkitaFilterPlugins(query).withServer((filters) => {
     *      return this.api.getData(filters);
     *  });
     *
     *  Return false to not add in store. if you want to manage the store in your own.
     */
    /**
     *  Add support of filters from server. Provide a function that will be call each time a filter changes
     *
     *  new AkitaFilterPlugins(query).withServer((filters) => {
     *      return this.api.getData(filters);
     *  });
     *
     *  Return false to not add in store. if you want to manage the store in your own.
     * @param {?} onChangeFilter
     * @param {?=} options
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.withServer = /**
     *  Add support of filters from server. Provide a function that will be call each time a filter changes
     *
     *  new AkitaFilterPlugins(query).withServer((filters) => {
     *      return this.api.getData(filters);
     *  });
     *
     *  Return false to not add in store. if you want to manage the store in your own.
     * @param {?} onChangeFilter
     * @param {?=} options
     * @return {?}
     */
    function (onChangeFilter, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        this._server = true;
        // Change default select filters to remove server filters, if you use selectAllByFilters();
        this._selectFilters$ = this._filtersQuery.selectAll({ sortBy: 'order', filterBy: (/**
             * @param {?} filter
             * @return {?}
             */
            function (filter) { return !filter.server; }) });
        /** @type {?} */
        var listObservable = [];
        listObservable.push(this._filtersQuery.selectAll({ sortBy: 'order', filterBy: (/**
             * @param {?} filter
             * @return {?}
             */
            function (filter) { return filter.server; }) }));
        if (options.withSort) {
            listObservable.push(this.selectSortBy());
        }
        merge(listObservable).subscribe((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var returnOnChange = onChangeFilter(_this.getNormalizedFilters(options));
            if (returnOnChange !== false && isObservable(returnOnChange)) {
                returnOnChange.subscribe((/**
                 * @param {?} newValue
                 * @return {?}
                 */
                function (newValue) {
                    _this.getStore().set(newValue);
                }));
            }
        }));
        return this;
    };
    /** Return true, if server is configured **/
    /**
     * Return true, if server is configured *
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.hasServer = /**
     * Return true, if server is configured *
     * @return {?}
     */
    function () {
        return this._server;
    };
    /**
     *  Select all filters
     *
     *  Note: Only all filters not hided (with hide=true), will not be displayed. If you want it, call directly to:
     * `this.filtersQuery.selectAll()`
     *
     *
     */
    /**
     *  Select all filters
     *
     *  Note: Only all filters not hided (with hide=true), will not be displayed. If you want it, call directly to:
     * `this.filtersQuery.selectAll()`
     *
     *
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.selectFilters = /**
     *  Select all filters
     *
     *  Note: Only all filters not hided (with hide=true), will not be displayed. If you want it, call directly to:
     * `this.filtersQuery.selectAll()`
     *
     *
     * @return {?}
     */
    function () {
        return this._selectFiltersAll$;
    };
    /**
     * Get all the current snapshot filters
     *
     *  Note: filters with hide=true, will not be displayed. If you want it, call directly to:
     * `this.filtersQuery.getAll()`
     */
    /**
     * Get all the current snapshot filters
     *
     *  Note: filters with hide=true, will not be displayed. If you want it, call directly to:
     * `this.filtersQuery.getAll()`
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.getFilters = /**
     * Get all the current snapshot filters
     *
     *  Note: filters with hide=true, will not be displayed. If you want it, call directly to:
     * `this.filtersQuery.getAll()`
     * @return {?}
     */
    function () {
        return this._filtersQuery.getAll({ filterBy: (/**
             * @param {?} filter
             * @return {?}
             */
            function (filter) { return !filter.hide; }) });
    };
    /**
     * Get all the current snapshot server filters (only if server is available else return default not hidden filters)
     *
     *  Note: filters with server=false, will not be displayed. If you want it, call directly to:
     * `this.filtersQuery.getAll()`
     */
    /**
     * Get all the current snapshot server filters (only if server is available else return default not hidden filters)
     *
     *  Note: filters with server=false, will not be displayed. If you want it, call directly to:
     * `this.filtersQuery.getAll()`
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.getServerFilters = /**
     * Get all the current snapshot server filters (only if server is available else return default not hidden filters)
     *
     *  Note: filters with server=false, will not be displayed. If you want it, call directly to:
     * `this.filtersQuery.getAll()`
     * @return {?}
     */
    function () {
        return this._server ? this._filtersQuery.getAll({ filterBy: (/**
             * @param {?} filter
             * @return {?}
             */
            function (filter) { return !filter.server; }) }) : this.getFilters();
    };
    /**
     * Select All Entity with apply filter to it, and updated with any change (entity or filter)
     * Will not apply sort, if need return   asObject:true !
     */
    /**
     * Select All Entity with apply filter to it, and updated with any change (entity or filter)
     * Will not apply sort, if need return   asObject:true !
     * @param {?=} options
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.selectAllByFilters = /**
     * Select All Entity with apply filter to it, and updated with any change (entity or filter)
     * Will not apply sort, if need return   asObject:true !
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        if (options && options.asObject) {
            return combineLatest(this._selectFilters$, this.getQuery().selectAll(options)).pipe(map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), filters = _b[0], entities = _b[1];
                /** @type {?} */
                var unkNowEntity = entities;
                return _this._applyFiltersForHashMap(((/** @type {?} */ (unkNowEntity))), filters);
            })));
        }
        else {
            return combineLatest(this._selectFilters$, this.getQuery().selectAll(options), this.selectSortBy()).pipe(map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 3), filters = _b[0], entities = _b[1], sort = _b[2];
                /** @type {?} */
                var unkNowEntity = entities;
                return _this._applyFiltersForArray(((/** @type {?} */ (unkNowEntity))), filters, sort);
            })));
        }
    };
    /**
     * Create or update a filter
     */
    /**
     * Create or update a filter
     * @param {?} filter
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.setFilter = /**
     * Create or update a filter
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        if (this._server && isUndefined(typeof filter.server)) {
            filter.server = true;
        }
        /** @type {?} */
        var entity = createFilter(filter);
        this.filtersStore.upsert(entity.id, entity);
    };
    /**
     * Remove a Filter
     */
    /**
     * Remove a Filter
     * @param {?} id
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.removeFilter = /**
     * Remove a Filter
     * @param {?} id
     * @return {?}
     */
    function (id) {
        this.filtersStore.remove(id);
    };
    /**
     * Clear all filters
     */
    /**
     * Clear all filters
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.clearFilters = /**
     * Clear all filters
     * @return {?}
     */
    function () {
        this.filtersStore.remove();
    };
    /**
     * Get filter value, return null, if value not available
     */
    /**
     * Get filter value, return null, if value not available
     * @template T
     * @param {?} id
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.getFilterValue = /**
     * Get filter value, return null, if value not available
     * @template T
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (this.filtersQuery.hasEntity(id)) {
            /** @type {?} */
            var entity = this.filtersQuery.getEntity(id);
            return entity.value ? entity.value : null;
        }
        return null;
    };
    /**
     * Get filter value, return null, if value not available
     */
    /**
     * Get filter value, return null, if value not available
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.getSortValue = /**
     * Get filter value, return null, if value not available
     * @return {?}
     */
    function () {
        /** @type {?} */
        var state = this.filtersQuery.getValue();
        return state.sort ? state.sort : null;
    };
    /**
     * Select Sort by value
     */
    /**
     * Select Sort by value
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.selectSortBy = /**
     * Select Sort by value
     * @return {?}
     */
    function () {
        return this._selectSortBy$;
    };
    /**
     * Set orderBy
     */
    /**
     * Set orderBy
     * @param {?} order
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.setSortBy = /**
     * Set orderBy
     * @param {?} order
     * @return {?}
     */
    function (order) {
        this.filtersStore.update({ sort: order });
    };
    /**
     * Get the filters normalized as key value or as query params.
     * This can be useful for server-side filtering
     */
    /**
     * Get the filters normalized as key value or as query params.
     * This can be useful for server-side filtering
     * @param {?=} options
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.getNormalizedFilters = /**
     * Get the filters normalized as key value or as query params.
     * This can be useful for server-side filtering
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var e_1, _a;
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var result = {};
        options = tslib_1.__assign({ sortByKey: 'sortBy', sortByOrderKey: 'sortByOrder' }, options);
        try {
            for (var _b = tslib_1.__values(this.getServerFilters()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var filter = _c.value;
                result[filter.id] = filter.value;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (options.withSort) {
            /** @type {?} */
            var sort = this.getSortValue();
            result[options.sortByKey] = sort.sortBy;
            result[options.sortByOrderKey] = sort.sortByOrder;
        }
        if (options.asQueryParams) {
            return this._serialize(result);
        }
        return result;
    };
    /**
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.clearFilters();
    };
    /** This method is responsible for getting access to the query. */
    /**
     * This method is responsible for getting access to the query.
     * @protected
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.getQuery = /**
     * This method is responsible for getting access to the query.
     * @protected
     * @return {?}
     */
    function () {
        return this.query;
    };
    /** This method is responsible for getting access to the store. */
    /**
     * This method is responsible for getting access to the store.
     * @protected
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.getStore = /**
     * This method is responsible for getting access to the store.
     * @protected
     * @return {?}
     */
    function () {
        return this.getQuery().__store__;
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    AkitaFiltersPlugin.prototype._serialize = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return Object.keys(obj)
            .map((/**
         * @param {?} k
         * @return {?}
         */
        function (k) { return encodeURIComponent(k) + "=" + encodeURIComponent(obj[k]); }))
            .join('&');
    };
    /**
     * @private
     * @param {?} entities
     * @param {?} filters
     * @param {?} sort
     * @return {?}
     */
    AkitaFiltersPlugin.prototype._applyFiltersForArray = /**
     * @private
     * @param {?} entities
     * @param {?} filters
     * @param {?} sort
     * @return {?}
     */
    function (entities, filters, sort) {
        /** @type {?} */
        var entitiesFiltered = entities;
        if (filters.length !== 0) {
            entitiesFiltered = entities.filter((/**
             * @param {?} entity
             * @param {?} index
             * @param {?} array
             * @return {?}
             */
            function (entity, index, array) {
                return filters.every((/**
                 * @param {?} filter
                 * @return {?}
                 */
                function (filter) {
                    if (filter.predicate) {
                        return !!filter.predicate(entity, index, array, filter);
                    }
                    return true;
                }));
            }));
        }
        if (sort && sort.sortBy) {
            /** @type {?} */
            var _sortBy_1 = isFunction(sort.sortBy) ? sort.sortBy : compareValues(sort.sortBy, sort.sortByOrder);
            entitiesFiltered = tslib_1.__spread(entitiesFiltered.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) { return _sortBy_1(a, b, entities); })));
        }
        return entitiesFiltered;
    };
    /**
     * @private
     * @param {?} entities
     * @param {?} filters
     * @return {?}
     */
    AkitaFiltersPlugin.prototype._applyFiltersForHashMap = /**
     * @private
     * @param {?} entities
     * @param {?} filters
     * @return {?}
     */
    function (entities, filters) {
        var _this = this;
        if (filters.length === 0) {
            return entities;
        }
        /** @type {?} */
        var hashMapFiltered = {};
        Object.keys(entities).forEach((/**
         * @param {?} entityKey
         * @param {?} index
         * @return {?}
         */
        function (entityKey, index) {
            /** @type {?} */
            var entity = (/** @type {?} */ (entities[entityKey]));
            if (_this._applyFiltersForOneEntity(filters, entity, index, entities)) {
                hashMapFiltered[entityKey] = entity;
            }
        }));
        return hashMapFiltered;
    };
    /**
     * @private
     * @param {?} filters
     * @param {?} entity
     * @param {?} index
     * @param {?} array
     * @return {?}
     */
    AkitaFiltersPlugin.prototype._applyFiltersForOneEntity = /**
     * @private
     * @param {?} filters
     * @param {?} entity
     * @param {?} index
     * @param {?} array
     * @return {?}
     */
    function (filters, entity, index, array) {
        return filters.every((/**
         * @param {?} filter
         * @return {?}
         */
        function (filter) {
            if (filter.predicate) {
                return !!filter.predicate(entity, index, array, filter);
            }
            return true;
        }));
    };
    /**
     * @protected
     * @param {?} id
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.instantiatePlugin = /**
     * @protected
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return null;
    };
    return AkitaFiltersPlugin;
}(EntityCollectionPlugin));
/**
 * @template S, E, I, P
 */
export { AkitaFiltersPlugin };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AkitaFiltersPlugin.prototype._filtersStore;
    /**
     * @type {?}
     * @private
     */
    AkitaFiltersPlugin.prototype._filtersQuery;
    /**
     * @type {?}
     * @private
     */
    AkitaFiltersPlugin.prototype._server;
    /**
     * @type {?}
     * @private
     */
    AkitaFiltersPlugin.prototype._selectFilters$;
    /**
     * @type {?}
     * @private
     */
    AkitaFiltersPlugin.prototype._selectSortBy$;
    /**
     * @type {?}
     * @private
     */
    AkitaFiltersPlugin.prototype._selectFiltersAll$;
    /**
     * @type {?}
     * @protected
     */
    AkitaFiltersPlugin.prototype.query;
    /**
     * @type {?}
     * @private
     */
    AkitaFiltersPlugin.prototype.params;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWtpdGEtZmlsdGVycy1wbHVnaW4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9ha2l0YS1maWx0ZXJzLXBsdWdpbi8iLCJzb3VyY2VzIjpbImxpYi9ha2l0YS1maWx0ZXJzLXBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBYyxpQkFBaUIsRUFBRSxZQUFZLEVBQWUsTUFBTSx1QkFBdUIsQ0FBQztBQUNqRyxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUN4RCxPQUFPLEVBQUMsYUFBYSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQWtDLE1BQU0sTUFBTSxDQUFDO0FBQ3pGLE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuQyxPQUFPLEVBQ0wsYUFBYSxFQUNiLHNCQUFzQixFQU90QixVQUFVLEVBQ1YsV0FBVyxFQVNaLE1BQU0saUJBQWlCLENBQUM7Ozs7O0FBRXpCLG1DQUtDOzs7SUFKQyx5Q0FBMEI7O0lBQzFCLGtDQUFrQzs7Ozs7O0FBS3BDLHNDQUtDOzs7SUFKQywyQ0FBbUI7O0lBQ25CLGdEQUF3Qjs7SUFDeEIsNENBQW1COztJQUNuQixpREFBd0I7Ozs7O0FBRzFCOzs7O0lBQ1UsOENBQTRCO0lBVXBDLDRCQUFzQixLQUFxQixFQUFVLE1BQTZCO1FBQTdCLHVCQUFBLEVBQUEsV0FBNkI7UUFBbEYsWUFDRSxrQkFBTSxLQUFLLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQVMvQjtRQVZxQixXQUFLLEdBQUwsS0FBSyxDQUFnQjtRQUFVLFlBQU0sR0FBTixNQUFNLENBQXVCO1FBTjFFLGFBQU8sR0FBWSxLQUFLLENBQUM7UUFRL0IsS0FBSSxDQUFDLE1BQU0sb0JBQU8sRUFBQyxnQkFBZ0IsRUFBRSxLQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUyxHQUFHLFNBQVMsRUFBQyxFQUFLLE1BQU0sQ0FBQyxDQUFDO1FBRXhGLEtBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxpQkFBaUIsQ0FBSSxLQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDNUUsS0FBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLGlCQUFpQixDQUFJLEtBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUVsRSxLQUFJLENBQUMsZUFBZSxHQUFHLEtBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUMsTUFBTSxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7UUFDdEUsS0FBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFROzs7O1lBQUUsVUFBQSxNQUFNLElBQUksT0FBQSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQVosQ0FBWSxDQUFBLEVBQUMsQ0FBQyxDQUFDO1FBQzNHLEtBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSSxDQUFDLFlBQVksQ0FBQyxNQUFNOzs7O1FBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUF2QyxDQUF1QyxFQUFDLENBQUM7O0lBQ25HLENBQUM7SUFFRCxzQkFBSSw0Q0FBWTs7OztRQUFoQjtZQUNFLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUM1QixDQUFDOzs7T0FBQTtJQUVELHNCQUFJLDRDQUFZOzs7O1FBQWhCO1lBQ0UsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQzVCLENBQUM7OztPQUFBO0lBRUQ7Ozs7Ozs7O09BUUc7Ozs7Ozs7Ozs7Ozs7SUFDSCx1Q0FBVTs7Ozs7Ozs7Ozs7O0lBQVYsVUFDRSxjQUEyRSxFQUMzRSxPQUFxQztRQUZ2QyxpQkF3QkM7UUF0QkMsd0JBQUEsRUFBQSxZQUFxQztRQUNyQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUVwQiwyRkFBMkY7UUFDM0YsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxFQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUTs7OztZQUFFLFVBQUEsTUFBTSxJQUFJLE9BQUEsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFkLENBQWMsQ0FBQSxFQUFDLENBQUMsQ0FBQzs7WUFFckcsY0FBYyxHQUEyQixFQUFFO1FBQ2pELGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsRUFBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVE7Ozs7WUFBRSxVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sQ0FBQyxNQUFNLEVBQWIsQ0FBYSxDQUFBLEVBQUMsQ0FBQyxDQUFDLENBQUM7UUFFeEcsSUFBSSxPQUFPLENBQUMsUUFBUSxFQUFFO1lBQ3BCLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7U0FDMUM7UUFDRCxLQUFLLENBQXVFLGNBQWMsQ0FBQyxDQUFDLFNBQVM7OztRQUFDOztnQkFDOUYsY0FBYyxHQUE2QyxjQUFjLENBQUMsS0FBSSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRW5ILElBQUksY0FBYyxLQUFLLEtBQUssSUFBSSxZQUFZLENBQUMsY0FBYyxDQUFDLEVBQUU7Z0JBQzVELGNBQWMsQ0FBQyxTQUFTOzs7O2dCQUFDLFVBQUMsUUFBNEI7b0JBQ3BELEtBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ2hDLENBQUMsRUFBQyxDQUFDO2FBQ0o7UUFDSCxDQUFDLEVBQUMsQ0FBQztRQUNILE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELDRDQUE0Qzs7Ozs7SUFDNUMsc0NBQVM7Ozs7SUFBVDtRQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRzs7Ozs7Ozs7OztJQUNILDBDQUFhOzs7Ozs7Ozs7SUFBYjtRQUNFLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDO0lBQ2pDLENBQUM7SUFFRDs7Ozs7T0FLRzs7Ozs7Ozs7SUFDSCx1Q0FBVTs7Ozs7OztJQUFWO1FBQ0UsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFDLFFBQVE7Ozs7WUFBRSxVQUFBLE1BQU0sSUFBSSxPQUFBLENBQUMsTUFBTSxDQUFDLElBQUksRUFBWixDQUFZLENBQUEsRUFBQyxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVEOzs7OztPQUtHOzs7Ozs7OztJQUNILDZDQUFnQjs7Ozs7OztJQUFoQjtRQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBQyxRQUFROzs7O1lBQUUsVUFBQSxNQUFNLElBQUksT0FBQSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQWQsQ0FBYyxDQUFBLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDNUcsQ0FBQztJQUVEOzs7T0FHRzs7Ozs7OztJQUNILCtDQUFrQjs7Ozs7O0lBQWxCLFVBQW1CLE9BRWdDO1FBRm5ELGlCQW1CQztRQWhCQyxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxFQUFFO1lBQy9CLE9BQU8sYUFBYSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDakYsR0FBRzs7OztZQUFDLFVBQUMsRUFBbUI7b0JBQW5CLDBCQUFtQixFQUFsQixlQUFPLEVBQUUsZ0JBQVE7O29CQUNmLFlBQVksR0FBWSxRQUFRO2dCQUN0QyxPQUFPLEtBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLG1CQUFBLFlBQVksRUFBNkIsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQzVGLENBQUMsRUFBQyxDQUNILENBQUM7U0FDSDthQUFNO1lBRUwsT0FBTyxhQUFhLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDdEcsR0FBRzs7OztZQUFDLFVBQUMsRUFBeUI7b0JBQXpCLDBCQUF5QixFQUF4QixlQUFPLEVBQUUsZ0JBQVEsRUFBRSxZQUFJOztvQkFDckIsWUFBWSxHQUFZLFFBQVE7Z0JBQ3RDLE9BQU8sS0FBSSxDQUFDLHFCQUFxQixDQUFDLENBQUMsbUJBQUEsWUFBWSxFQUFzQixDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3pGLENBQUMsRUFBQyxDQUNILENBQUM7U0FDSDtJQUNILENBQUM7SUFFRDs7T0FFRzs7Ozs7O0lBQ0gsc0NBQVM7Ozs7O0lBQVQsVUFBVSxNQUErQjtRQUN2QyxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksV0FBVyxDQUFDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3JELE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1NBQ3RCOztZQUNLLE1BQU0sR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO1FBQ25DLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVEOztPQUVHOzs7Ozs7SUFDSCx5Q0FBWTs7Ozs7SUFBWixVQUFhLEVBQU07UUFDakIsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVEOztPQUVHOzs7OztJQUNILHlDQUFZOzs7O0lBQVo7UUFDRSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRDs7T0FFRzs7Ozs7OztJQUNILDJDQUFjOzs7Ozs7SUFBZCxVQUF3QixFQUFVO1FBQ2hDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUU7O2dCQUM3QixNQUFNLEdBQW1CLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztZQUM5RCxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztTQUMzQztRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOztPQUVHOzs7OztJQUNILHlDQUFZOzs7O0lBQVo7O1lBQ1EsS0FBSyxHQUFvQixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRTtRQUMzRCxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUN4QyxDQUFDO0lBRUQ7O09BRUc7Ozs7O0lBQ0kseUNBQVk7Ozs7SUFBbkI7UUFDRSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDN0IsQ0FBQztJQUVEOztPQUVHOzs7Ozs7SUFDSCxzQ0FBUzs7Ozs7SUFBVCxVQUFVLEtBQXVCO1FBQy9CLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUMsSUFBSSxFQUFFLEtBQUssRUFBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVEOzs7T0FHRzs7Ozs7OztJQUNILGlEQUFvQjs7Ozs7O0lBQXBCLFVBQXFCLE9BQXFDOztRQUFyQyx3QkFBQSxFQUFBLFlBQXFDOztZQUNsRCxNQUFNLEdBQUcsRUFBRTtRQUNqQixPQUFPLHNCQUFJLFNBQVMsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLGFBQWEsSUFBSyxPQUFPLENBQUMsQ0FBQzs7WUFFM0UsS0FBcUIsSUFBQSxLQUFBLGlCQUFBLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFBLGdCQUFBLDRCQUFFO2dCQUF6QyxJQUFNLE1BQU0sV0FBQTtnQkFDZixNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7YUFDbEM7Ozs7Ozs7OztRQUVELElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRTs7Z0JBQ2QsSUFBSSxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDaEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQ3hDLE1BQU0sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztTQUNuRDtRQUVELElBQUksT0FBTyxDQUFDLGFBQWEsRUFBRTtZQUN6QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDaEM7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOzs7O0lBRUQsb0NBQU87OztJQUFQO1FBQ0UsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFJRCxrRUFBa0U7Ozs7OztJQUN4RCxxQ0FBUTs7Ozs7SUFBbEI7UUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVELGtFQUFrRTs7Ozs7O0lBQ3hELHFDQUFROzs7OztJQUFsQjtRQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLFNBQVMsQ0FBQztJQUNuQyxDQUFDOzs7Ozs7SUFFTyx1Q0FBVTs7Ozs7SUFBbEIsVUFBbUIsR0FBRztRQUNwQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO2FBQ3BCLEdBQUc7Ozs7UUFBQyxVQUFBLENBQUMsSUFBSSxPQUFHLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxTQUFJLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBRyxFQUF4RCxDQUF3RCxFQUFDO2FBQ2xFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNmLENBQUM7Ozs7Ozs7O0lBRU8sa0RBQXFCOzs7Ozs7O0lBQTdCLFVBQ0UsUUFBNEIsRUFDNUIsT0FBeUIsRUFDekIsSUFBMEQ7O1lBQ3RELGdCQUFnQixHQUFHLFFBQVE7UUFDL0IsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN4QixnQkFBZ0IsR0FBRyxRQUFRLENBQUMsTUFBTTs7Ozs7O1lBQUMsVUFBQyxNQUF3QixFQUFFLEtBQWEsRUFBRSxLQUF5QjtnQkFDcEcsT0FBTyxPQUFPLENBQUMsS0FBSzs7OztnQkFBQyxVQUFDLE1BQXNCO29CQUMxQyxJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUU7d0JBQ3BCLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7cUJBQ3pEO29CQUNELE9BQU8sSUFBSSxDQUFDO2dCQUNkLENBQUMsRUFBQyxDQUFDO1lBQ0wsQ0FBQyxFQUFDLENBQUM7U0FDSjtRQUVELElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7O2dCQUNqQixTQUFPLEdBQVEsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQztZQUN6RyxnQkFBZ0Isb0JBQU8sZ0JBQWdCLENBQUMsSUFBSTs7Ozs7WUFBQyxVQUFDLENBQUMsRUFBRSxDQUFDLElBQUssT0FBQSxTQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsRUFBdkIsQ0FBdUIsRUFBQyxDQUFDLENBQUM7U0FDbEY7UUFDRCxPQUFPLGdCQUFnQixDQUFDO0lBQzFCLENBQUM7Ozs7Ozs7SUFFTyxvREFBdUI7Ozs7OztJQUEvQixVQUNFLFFBQW1DLEVBQ25DLE9BQXlCO1FBRjNCLGlCQWVDO1FBWkMsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN4QixPQUFPLFFBQVEsQ0FBQztTQUNqQjs7WUFDTyxlQUFlLEdBQThCLEVBQUU7UUFDckQsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPOzs7OztRQUFDLFVBQUMsU0FBaUIsRUFBRSxLQUFhOztnQkFDdkQsTUFBTSxHQUFxQixtQkFBQSxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQW9CO1lBQ3hFLElBQUksS0FBSSxDQUFDLHlCQUF5QixDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxFQUFFO2dCQUNwRSxlQUFlLENBQUMsU0FBUyxDQUFDLEdBQUcsTUFBTSxDQUFDO2FBQ3JDO1FBQ0gsQ0FBQyxFQUFDLENBQUM7UUFFSCxPQUFPLGVBQWUsQ0FBQztJQUMzQixDQUFDOzs7Ozs7Ozs7SUFFTyxzREFBeUI7Ozs7Ozs7O0lBQWpDLFVBQWtDLE9BQXlCLEVBQ3pCLE1BQXdCLEVBQUUsS0FBYSxFQUN2QyxLQUFxRDtRQUNyRixPQUFPLE9BQU8sQ0FBQyxLQUFLOzs7O1FBQUMsVUFBQyxNQUFzQjtZQUMxQyxJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUU7Z0JBQ3BCLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7YUFDekQ7WUFDRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7O0lBRVMsOENBQWlCOzs7OztJQUEzQixVQUE0QixFQUFLO1FBQy9CLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNILHlCQUFDO0FBQUQsQ0FBQyxBQWhTRCxDQUNVLHNCQUFzQixHQStSL0I7Ozs7Ozs7Ozs7SUE3UkMsMkNBQXFEOzs7OztJQUNyRCwyQ0FBcUQ7Ozs7O0lBQ3JELHFDQUFpQzs7Ozs7SUFFakMsNkNBQXNEOzs7OztJQUN0RCw0Q0FBcUU7Ozs7O0lBQ3JFLGdEQUFrRTs7Ozs7SUFFdEQsbUNBQStCOzs7OztJQUFFLG9DQUFxQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWtpdGFGaWx0ZXIsIEFraXRhRmlsdGVyc1N0b3JlLCBjcmVhdGVGaWx0ZXIsIEZpbHRlcnNTdGF0ZX0gZnJvbSAnLi9ha2l0YS1maWx0ZXJzLXN0b3JlJztcbmltcG9ydCB7QWtpdGFGaWx0ZXJzUXVlcnl9IGZyb20gJy4vYWtpdGEtZmlsdGVycy1xdWVyeSc7XG5pbXBvcnQge2NvbWJpbmVMYXRlc3QsIGlzT2JzZXJ2YWJsZSwgbWVyZ2UsIE9ic2VydmFibGUsIE9ic2VydmVkVmFsdWVPZiwgb2Z9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHttYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7XG4gIGNvbXBhcmVWYWx1ZXMsXG4gIEVudGl0eUNvbGxlY3Rpb25QbHVnaW4sXG4gIEVudGl0eVN0YXRlLFxuICBFbnRpdHlTdG9yZSxcbiAgZ2V0RW50aXR5VHlwZSxcbiAgZ2V0SURUeXBlLFxuICBIYXNoTWFwLFxuICBJRCxcbiAgaXNGdW5jdGlvbixcbiAgaXNVbmRlZmluZWQsXG4gIE9yQXJyYXksXG4gIFF1ZXJ5RW50aXR5LFxuICBTZWxlY3RBbGxPcHRpb25zQSxcbiAgU2VsZWN0QWxsT3B0aW9uc0IsXG4gIFNlbGVjdEFsbE9wdGlvbnNDLFxuICBTZWxlY3RBbGxPcHRpb25zRCxcbiAgU2VsZWN0QWxsT3B0aW9uc0UsXG4gIFNvcnRCeU9wdGlvbnNcbn0gZnJvbSAnQGRhdG9yYW1hL2FraXRhJztcblxuZXhwb3J0IGludGVyZmFjZSBGaWx0ZXJzUGFyYW1zPFMgZXh0ZW5kcyBFbnRpdHlTdGF0ZT4ge1xuICBmaWx0ZXJzU3RvcmVOYW1lPzogc3RyaW5nO1xuICBlbnRpdHlJZHM/OiBPckFycmF5PGdldElEVHlwZTxTPj47XG5cbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG5pbnRlcmZhY2UgTm9ybWFsaXplZEZpbHRlck9wdGlvbnMge1xuICB3aXRoU29ydD86IGJvb2xlYW47XG4gIGFzUXVlcnlQYXJhbXM/OiBib29sZWFuO1xuICBzb3J0QnlLZXk/OiBzdHJpbmc7XG4gIHNvcnRCeU9yZGVyS2V5Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgQWtpdGFGaWx0ZXJzUGx1Z2luPFMgZXh0ZW5kcyBFbnRpdHlTdGF0ZSwgRSA9IGdldEVudGl0eVR5cGU8Uz4sIEkgPSBPckFycmF5PGdldElEVHlwZTxTPj4sIFAgPSBhbnk+XG4gIGV4dGVuZHMgRW50aXR5Q29sbGVjdGlvblBsdWdpbjxTLCBQPiB7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBfZmlsdGVyc1N0b3JlOiBBa2l0YUZpbHRlcnNTdG9yZTxTPjtcbiAgcHJpdmF0ZSByZWFkb25seSBfZmlsdGVyc1F1ZXJ5OiBBa2l0YUZpbHRlcnNRdWVyeTxTPjtcbiAgcHJpdmF0ZSBfc2VydmVyOiBib29sZWFuID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBfc2VsZWN0RmlsdGVycyQ6IE9ic2VydmFibGU8QWtpdGFGaWx0ZXI8Uz5bXT47XG4gIHByaXZhdGUgcmVhZG9ubHkgX3NlbGVjdFNvcnRCeSQ6IE9ic2VydmFibGU8U29ydEJ5T3B0aW9uczxFPiB8IG51bGw+O1xuICBwcml2YXRlIHJlYWRvbmx5IF9zZWxlY3RGaWx0ZXJzQWxsJDogT2JzZXJ2YWJsZTxBa2l0YUZpbHRlcjxTPltdPjtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcXVlcnk6IFF1ZXJ5RW50aXR5PFM+LCBwcml2YXRlIHBhcmFtczogRmlsdGVyc1BhcmFtczxTPiA9IHt9KSB7XG4gICAgc3VwZXIocXVlcnksIHBhcmFtcy5lbnRpdHlJZHMpO1xuICAgIHRoaXMucGFyYW1zID0gey4uLntmaWx0ZXJzU3RvcmVOYW1lOiB0aGlzLmdldFN0b3JlKCkuc3RvcmVOYW1lICsgJ0ZpbHRlcnMnfSwgLi4ucGFyYW1zfTtcblxuICAgIHRoaXMuX2ZpbHRlcnNTdG9yZSA9IG5ldyBBa2l0YUZpbHRlcnNTdG9yZTxTPih0aGlzLnBhcmFtcy5maWx0ZXJzU3RvcmVOYW1lKTtcbiAgICB0aGlzLl9maWx0ZXJzUXVlcnkgPSBuZXcgQWtpdGFGaWx0ZXJzUXVlcnk8Uz4odGhpcy5fZmlsdGVyc1N0b3JlKTtcblxuICAgIHRoaXMuX3NlbGVjdEZpbHRlcnMkID0gdGhpcy5maWx0ZXJzUXVlcnkuc2VsZWN0QWxsKHtzb3J0Qnk6ICdvcmRlcid9KTtcbiAgICB0aGlzLl9zZWxlY3RGaWx0ZXJzQWxsJCA9IHRoaXMuZmlsdGVyc1F1ZXJ5LnNlbGVjdEFsbCh7c29ydEJ5OiAnb3JkZXInLCBmaWx0ZXJCeTogZmlsdGVyID0+ICFmaWx0ZXIuaGlkZX0pO1xuICAgIHRoaXMuX3NlbGVjdFNvcnRCeSQgPSB0aGlzLmZpbHRlcnNRdWVyeS5zZWxlY3Qoc3RhdGUgPT4gc3RhdGUgJiYgc3RhdGUuc29ydCA/IHN0YXRlLnNvcnQgOiBudWxsKTtcbiAgfVxuXG4gIGdldCBmaWx0ZXJzU3RvcmUoKTogQWtpdGFGaWx0ZXJzU3RvcmU8Uz4ge1xuICAgIHJldHVybiB0aGlzLl9maWx0ZXJzU3RvcmU7XG4gIH1cblxuICBnZXQgZmlsdGVyc1F1ZXJ5KCk6IEFraXRhRmlsdGVyc1F1ZXJ5PFM+IHtcbiAgICByZXR1cm4gdGhpcy5fZmlsdGVyc1F1ZXJ5O1xuICB9XG5cbiAgLyoqXG4gICAqICBBZGQgc3VwcG9ydCBvZiBmaWx0ZXJzIGZyb20gc2VydmVyLiBQcm92aWRlIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGwgZWFjaCB0aW1lIGEgZmlsdGVyIGNoYW5nZXNcbiAgICpcbiAgICogIG5ldyBBa2l0YUZpbHRlclBsdWdpbnMocXVlcnkpLndpdGhTZXJ2ZXIoKGZpbHRlcnMpID0+IHtcbiAgICogICAgICByZXR1cm4gdGhpcy5hcGkuZ2V0RGF0YShmaWx0ZXJzKTtcbiAgICogIH0pO1xuICAgKlxuICAgKiAgUmV0dXJuIGZhbHNlIHRvIG5vdCBhZGQgaW4gc3RvcmUuIGlmIHlvdSB3YW50IHRvIG1hbmFnZSB0aGUgc3RvcmUgaW4geW91ciBvd24uXG4gICAqL1xuICB3aXRoU2VydmVyKFxuICAgIG9uQ2hhbmdlRmlsdGVyOiAoZmlsdGVyc05vcm1hbGl6ZWQ6IHN0cmluZyB8IEhhc2hNYXA8YW55PikgPT4gYW55IHwgYm9vbGVhbixcbiAgICBvcHRpb25zOiBOb3JtYWxpemVkRmlsdGVyT3B0aW9ucyA9IHt9KTogQWtpdGFGaWx0ZXJzUGx1Z2luPFMsIEUsIEksIFA+IHtcbiAgICB0aGlzLl9zZXJ2ZXIgPSB0cnVlO1xuXG4gICAgLy8gQ2hhbmdlIGRlZmF1bHQgc2VsZWN0IGZpbHRlcnMgdG8gcmVtb3ZlIHNlcnZlciBmaWx0ZXJzLCBpZiB5b3UgdXNlIHNlbGVjdEFsbEJ5RmlsdGVycygpO1xuICAgIHRoaXMuX3NlbGVjdEZpbHRlcnMkID0gdGhpcy5fZmlsdGVyc1F1ZXJ5LnNlbGVjdEFsbCh7c29ydEJ5OiAnb3JkZXInLCBmaWx0ZXJCeTogZmlsdGVyID0+ICFmaWx0ZXIuc2VydmVyfSk7XG5cbiAgICBjb25zdCBsaXN0T2JzZXJ2YWJsZTogQXJyYXk8T2JzZXJ2YWJsZTxhbnk+PiA9IFtdO1xuICAgIGxpc3RPYnNlcnZhYmxlLnB1c2godGhpcy5fZmlsdGVyc1F1ZXJ5LnNlbGVjdEFsbCh7c29ydEJ5OiAnb3JkZXInLCBmaWx0ZXJCeTogZmlsdGVyID0+IGZpbHRlci5zZXJ2ZXJ9KSk7XG5cbiAgICBpZiAob3B0aW9ucy53aXRoU29ydCkge1xuICAgICAgbGlzdE9ic2VydmFibGUucHVzaCh0aGlzLnNlbGVjdFNvcnRCeSgpKTtcbiAgICB9XG4gICAgbWVyZ2U8T2JzZXJ2YWJsZTxnZXRFbnRpdHlUeXBlPFM+W10+IHwgT2JzZXJ2YWJsZTxTb3J0QnlPcHRpb25zPEU+IHwgbnVsbD4+KGxpc3RPYnNlcnZhYmxlKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgY29uc3QgcmV0dXJuT25DaGFuZ2U6IGJvb2xlYW4gfCBPYnNlcnZhYmxlPGdldEVudGl0eVR5cGU8Uz5bXT4gPSBvbkNoYW5nZUZpbHRlcih0aGlzLmdldE5vcm1hbGl6ZWRGaWx0ZXJzKG9wdGlvbnMpKTtcblxuICAgICAgaWYgKHJldHVybk9uQ2hhbmdlICE9PSBmYWxzZSAmJiBpc09ic2VydmFibGUocmV0dXJuT25DaGFuZ2UpKSB7XG4gICAgICAgIHJldHVybk9uQ2hhbmdlLnN1YnNjcmliZSgobmV3VmFsdWU6IGdldEVudGl0eVR5cGU8Uz5bXSkgPT4ge1xuICAgICAgICAgIHRoaXMuZ2V0U3RvcmUoKS5zZXQobmV3VmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKiBSZXR1cm4gdHJ1ZSwgaWYgc2VydmVyIGlzIGNvbmZpZ3VyZWQgKiovXG4gIGhhc1NlcnZlcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fc2VydmVyO1xuICB9XG5cbiAgLyoqXG4gICAqICBTZWxlY3QgYWxsIGZpbHRlcnNcbiAgICpcbiAgICogIE5vdGU6IE9ubHkgYWxsIGZpbHRlcnMgbm90IGhpZGVkICh3aXRoIGhpZGU9dHJ1ZSksIHdpbGwgbm90IGJlIGRpc3BsYXllZC4gSWYgeW91IHdhbnQgaXQsIGNhbGwgZGlyZWN0bHkgdG86XG4gICAqIGB0aGlzLmZpbHRlcnNRdWVyeS5zZWxlY3RBbGwoKWBcbiAgICpcbiAgICpcbiAgICovXG4gIHNlbGVjdEZpbHRlcnMoKTogT2JzZXJ2YWJsZTxBa2l0YUZpbHRlcjxTPltdPiB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbGVjdEZpbHRlcnNBbGwkO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgdGhlIGN1cnJlbnQgc25hcHNob3QgZmlsdGVyc1xuICAgKlxuICAgKiAgTm90ZTogZmlsdGVycyB3aXRoIGhpZGU9dHJ1ZSwgd2lsbCBub3QgYmUgZGlzcGxheWVkLiBJZiB5b3Ugd2FudCBpdCwgY2FsbCBkaXJlY3RseSB0bzpcbiAgICogYHRoaXMuZmlsdGVyc1F1ZXJ5LmdldEFsbCgpYFxuICAgKi9cbiAgZ2V0RmlsdGVycygpOiBBa2l0YUZpbHRlcjxTPltdIHtcbiAgICByZXR1cm4gdGhpcy5fZmlsdGVyc1F1ZXJ5LmdldEFsbCh7ZmlsdGVyQnk6IGZpbHRlciA9PiAhZmlsdGVyLmhpZGV9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYWxsIHRoZSBjdXJyZW50IHNuYXBzaG90IHNlcnZlciBmaWx0ZXJzIChvbmx5IGlmIHNlcnZlciBpcyBhdmFpbGFibGUgZWxzZSByZXR1cm4gZGVmYXVsdCBub3QgaGlkZGVuIGZpbHRlcnMpXG4gICAqXG4gICAqICBOb3RlOiBmaWx0ZXJzIHdpdGggc2VydmVyPWZhbHNlLCB3aWxsIG5vdCBiZSBkaXNwbGF5ZWQuIElmIHlvdSB3YW50IGl0LCBjYWxsIGRpcmVjdGx5IHRvOlxuICAgKiBgdGhpcy5maWx0ZXJzUXVlcnkuZ2V0QWxsKClgXG4gICAqL1xuICBnZXRTZXJ2ZXJGaWx0ZXJzKCk6IEFraXRhRmlsdGVyPFM+W10ge1xuICAgIHJldHVybiB0aGlzLl9zZXJ2ZXIgPyB0aGlzLl9maWx0ZXJzUXVlcnkuZ2V0QWxsKHtmaWx0ZXJCeTogZmlsdGVyID0+ICFmaWx0ZXIuc2VydmVyfSkgOiB0aGlzLmdldEZpbHRlcnMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZWxlY3QgQWxsIEVudGl0eSB3aXRoIGFwcGx5IGZpbHRlciB0byBpdCwgYW5kIHVwZGF0ZWQgd2l0aCBhbnkgY2hhbmdlIChlbnRpdHkgb3IgZmlsdGVyKVxuICAgKiBXaWxsIG5vdCBhcHBseSBzb3J0LCBpZiBuZWVkIHJldHVybiAgIGFzT2JqZWN0OnRydWUgIVxuICAgKi9cbiAgc2VsZWN0QWxsQnlGaWx0ZXJzKG9wdGlvbnM/OiBTZWxlY3RBbGxPcHRpb25zQTxFPlxuICAgIHwgU2VsZWN0QWxsT3B0aW9uc0I8RT4gfCBTZWxlY3RBbGxPcHRpb25zQzxFPiB8XG4gICAgU2VsZWN0QWxsT3B0aW9uc0Q8RT4gfCBTZWxlY3RBbGxPcHRpb25zRTxFPiB8IGFueSk6IE9ic2VydmFibGU8Z2V0RW50aXR5VHlwZTxTPltdIHwgSGFzaE1hcDxnZXRFbnRpdHlUeXBlPFM+Pj4ge1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuYXNPYmplY3QpIHtcbiAgICAgIHJldHVybiBjb21iaW5lTGF0ZXN0KHRoaXMuX3NlbGVjdEZpbHRlcnMkLCB0aGlzLmdldFF1ZXJ5KCkuc2VsZWN0QWxsKG9wdGlvbnMpKS5waXBlKFxuICAgICAgICBtYXAoKFtmaWx0ZXJzLCBlbnRpdGllc10pID0+IHtcbiAgICAgICAgICBjb25zdCB1bmtOb3dFbnRpdHk6IHVua25vd24gPSBlbnRpdGllcztcbiAgICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlGaWx0ZXJzRm9ySGFzaE1hcCgodW5rTm93RW50aXR5IGFzIEhhc2hNYXA8Z2V0RW50aXR5VHlwZTxTPj4pLCBmaWx0ZXJzKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcblxuICAgICAgcmV0dXJuIGNvbWJpbmVMYXRlc3QodGhpcy5fc2VsZWN0RmlsdGVycyQsIHRoaXMuZ2V0UXVlcnkoKS5zZWxlY3RBbGwob3B0aW9ucyksIHRoaXMuc2VsZWN0U29ydEJ5KCkpLnBpcGUoXG4gICAgICAgIG1hcCgoW2ZpbHRlcnMsIGVudGl0aWVzLCBzb3J0XSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHVua05vd0VudGl0eTogdW5rbm93biA9IGVudGl0aWVzO1xuICAgICAgICAgIHJldHVybiB0aGlzLl9hcHBseUZpbHRlcnNGb3JBcnJheSgodW5rTm93RW50aXR5IGFzIGdldEVudGl0eVR5cGU8Uz5bXSksIGZpbHRlcnMsIHNvcnQpO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIG9yIHVwZGF0ZSBhIGZpbHRlclxuICAgKi9cbiAgc2V0RmlsdGVyKGZpbHRlcjogUGFydGlhbDxBa2l0YUZpbHRlcjxTPj4pIHtcbiAgICBpZiAodGhpcy5fc2VydmVyICYmIGlzVW5kZWZpbmVkKHR5cGVvZiBmaWx0ZXIuc2VydmVyKSkge1xuICAgICAgZmlsdGVyLnNlcnZlciA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGVudGl0eSA9IGNyZWF0ZUZpbHRlcihmaWx0ZXIpO1xuICAgIHRoaXMuZmlsdGVyc1N0b3JlLnVwc2VydChlbnRpdHkuaWQsIGVudGl0eSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGEgRmlsdGVyXG4gICAqL1xuICByZW1vdmVGaWx0ZXIoaWQ6IElEKSB7XG4gICAgdGhpcy5maWx0ZXJzU3RvcmUucmVtb3ZlKGlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgZmlsdGVyc1xuICAgKi9cbiAgY2xlYXJGaWx0ZXJzKCkge1xuICAgIHRoaXMuZmlsdGVyc1N0b3JlLnJlbW92ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBmaWx0ZXIgdmFsdWUsIHJldHVybiBudWxsLCBpZiB2YWx1ZSBub3QgYXZhaWxhYmxlXG4gICAqL1xuICBnZXRGaWx0ZXJWYWx1ZTxUID0gYW55PihpZDogc3RyaW5nKTogVCB8IG51bGwge1xuICAgIGlmICh0aGlzLmZpbHRlcnNRdWVyeS5oYXNFbnRpdHkoaWQpKSB7XG4gICAgICBjb25zdCBlbnRpdHk6IEFraXRhRmlsdGVyPFM+ID0gdGhpcy5maWx0ZXJzUXVlcnkuZ2V0RW50aXR5KGlkKTtcbiAgICAgIHJldHVybiBlbnRpdHkudmFsdWUgPyBlbnRpdHkudmFsdWUgOiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBmaWx0ZXIgdmFsdWUsIHJldHVybiBudWxsLCBpZiB2YWx1ZSBub3QgYXZhaWxhYmxlXG4gICAqL1xuICBnZXRTb3J0VmFsdWUoKTogU29ydEJ5T3B0aW9uczxFPiB8IG51bGwge1xuICAgIGNvbnN0IHN0YXRlOiBGaWx0ZXJzU3RhdGU8Uz4gPSB0aGlzLmZpbHRlcnNRdWVyeS5nZXRWYWx1ZSgpO1xuICAgIHJldHVybiBzdGF0ZS5zb3J0ID8gc3RhdGUuc29ydCA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogU2VsZWN0IFNvcnQgYnkgdmFsdWVcbiAgICovXG4gIHB1YmxpYyBzZWxlY3RTb3J0QnkoKTogT2JzZXJ2YWJsZTxTb3J0QnlPcHRpb25zPEU+IHwgbnVsbD4ge1xuICAgIHJldHVybiB0aGlzLl9zZWxlY3RTb3J0QnkkO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBvcmRlckJ5XG4gICAqL1xuICBzZXRTb3J0Qnkob3JkZXI6IFNvcnRCeU9wdGlvbnM8RT4pIHtcbiAgICB0aGlzLmZpbHRlcnNTdG9yZS51cGRhdGUoe3NvcnQ6IG9yZGVyfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBmaWx0ZXJzIG5vcm1hbGl6ZWQgYXMga2V5IHZhbHVlIG9yIGFzIHF1ZXJ5IHBhcmFtcy5cbiAgICogVGhpcyBjYW4gYmUgdXNlZnVsIGZvciBzZXJ2ZXItc2lkZSBmaWx0ZXJpbmdcbiAgICovXG4gIGdldE5vcm1hbGl6ZWRGaWx0ZXJzKG9wdGlvbnM6IE5vcm1hbGl6ZWRGaWx0ZXJPcHRpb25zID0ge30pOiBzdHJpbmcgfCBIYXNoTWFwPGFueT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIG9wdGlvbnMgPSB7c29ydEJ5S2V5OiAnc29ydEJ5Jywgc29ydEJ5T3JkZXJLZXk6ICdzb3J0QnlPcmRlcicsIC4uLm9wdGlvbnN9O1xuXG4gICAgZm9yIChjb25zdCBmaWx0ZXIgb2YgdGhpcy5nZXRTZXJ2ZXJGaWx0ZXJzKCkpIHtcbiAgICAgIHJlc3VsdFtmaWx0ZXIuaWRdID0gZmlsdGVyLnZhbHVlO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLndpdGhTb3J0KSB7XG4gICAgICBjb25zdCBzb3J0ID0gdGhpcy5nZXRTb3J0VmFsdWUoKTtcbiAgICAgIHJlc3VsdFtvcHRpb25zLnNvcnRCeUtleV0gPSBzb3J0LnNvcnRCeTtcbiAgICAgIHJlc3VsdFtvcHRpb25zLnNvcnRCeU9yZGVyS2V5XSA9IHNvcnQuc29ydEJ5T3JkZXI7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuYXNRdWVyeVBhcmFtcykge1xuICAgICAgcmV0dXJuIHRoaXMuX3NlcmlhbGl6ZShyZXN1bHQpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuY2xlYXJGaWx0ZXJzKCk7XG4gIH1cblxuXG5cbiAgLyoqIFRoaXMgbWV0aG9kIGlzIHJlc3BvbnNpYmxlIGZvciBnZXR0aW5nIGFjY2VzcyB0byB0aGUgcXVlcnkuICovXG4gIHByb3RlY3RlZCBnZXRRdWVyeSgpOiBRdWVyeUVudGl0eTxTPiB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnk7XG4gIH1cblxuICAvKiogVGhpcyBtZXRob2QgaXMgcmVzcG9uc2libGUgZm9yIGdldHRpbmcgYWNjZXNzIHRvIHRoZSBzdG9yZS4gKi9cbiAgcHJvdGVjdGVkIGdldFN0b3JlKCk6IEVudGl0eVN0b3JlPFM+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRRdWVyeSgpLl9fc3RvcmVfXztcbiAgfVxuXG4gIHByaXZhdGUgX3NlcmlhbGl6ZShvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKVxuICAgICAgLm1hcChrID0+IGAke2VuY29kZVVSSUNvbXBvbmVudChrKX09JHtlbmNvZGVVUklDb21wb25lbnQob2JqW2tdKX1gKVxuICAgICAgLmpvaW4oJyYnKTtcbiAgfVxuXG4gIHByaXZhdGUgX2FwcGx5RmlsdGVyc0ZvckFycmF5KFxuICAgIGVudGl0aWVzOiBnZXRFbnRpdHlUeXBlPFM+W10sXG4gICAgZmlsdGVyczogQWtpdGFGaWx0ZXI8Uz5bXSxcbiAgICBzb3J0OiBPYnNlcnZlZFZhbHVlT2Y8T2JzZXJ2YWJsZTxTb3J0QnlPcHRpb25zPEU+IHwgbnVsbD4+KTogZ2V0RW50aXR5VHlwZTxTPltdIHtcbiAgICBsZXQgZW50aXRpZXNGaWx0ZXJlZCA9IGVudGl0aWVzO1xuICAgIGlmIChmaWx0ZXJzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgZW50aXRpZXNGaWx0ZXJlZCA9IGVudGl0aWVzLmZpbHRlcigoZW50aXR5OiBnZXRFbnRpdHlUeXBlPFM+LCBpbmRleDogbnVtYmVyLCBhcnJheTogZ2V0RW50aXR5VHlwZTxTPltdKSA9PiB7XG4gICAgICAgIHJldHVybiBmaWx0ZXJzLmV2ZXJ5KChmaWx0ZXI6IEFraXRhRmlsdGVyPFM+KSA9PiB7XG4gICAgICAgICAgaWYgKGZpbHRlci5wcmVkaWNhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiAhIWZpbHRlci5wcmVkaWNhdGUoZW50aXR5LCBpbmRleCwgYXJyYXksIGZpbHRlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChzb3J0ICYmIHNvcnQuc29ydEJ5KSB7XG4gICAgICBjb25zdCBfc29ydEJ5OiBhbnkgPSBpc0Z1bmN0aW9uKHNvcnQuc29ydEJ5KSA/IHNvcnQuc29ydEJ5IDogY29tcGFyZVZhbHVlcyhzb3J0LnNvcnRCeSwgc29ydC5zb3J0QnlPcmRlcik7XG4gICAgICBlbnRpdGllc0ZpbHRlcmVkID0gWy4uLmVudGl0aWVzRmlsdGVyZWQuc29ydCgoYSwgYikgPT4gX3NvcnRCeShhLCBiLCBlbnRpdGllcykpXTtcbiAgICB9XG4gICAgcmV0dXJuIGVudGl0aWVzRmlsdGVyZWQ7XG4gIH1cblxuICBwcml2YXRlIF9hcHBseUZpbHRlcnNGb3JIYXNoTWFwKFxuICAgIGVudGl0aWVzOiBIYXNoTWFwPGdldEVudGl0eVR5cGU8Uz4+LFxuICAgIGZpbHRlcnM6IEFraXRhRmlsdGVyPFM+W10pOiBIYXNoTWFwPGdldEVudGl0eVR5cGU8Uz4+IHtcbiAgICBpZiAoZmlsdGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBlbnRpdGllcztcbiAgICB9XG4gICAgICBjb25zdCBoYXNoTWFwRmlsdGVyZWQ6IEhhc2hNYXA8Z2V0RW50aXR5VHlwZTxTPj4gPSB7fTtcbiAgICAgIE9iamVjdC5rZXlzKGVudGl0aWVzKS5mb3JFYWNoKChlbnRpdHlLZXk6IHN0cmluZywgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICBjb25zdCBlbnRpdHk6IGdldEVudGl0eVR5cGU8Uz4gPSBlbnRpdGllc1tlbnRpdHlLZXldIGFzIGdldEVudGl0eVR5cGU8Uz47XG4gICAgICAgIGlmICh0aGlzLl9hcHBseUZpbHRlcnNGb3JPbmVFbnRpdHkoZmlsdGVycywgZW50aXR5LCBpbmRleCwgZW50aXRpZXMpKSB7XG4gICAgICAgICAgaGFzaE1hcEZpbHRlcmVkW2VudGl0eUtleV0gPSBlbnRpdHk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gaGFzaE1hcEZpbHRlcmVkO1xuICB9XG5cbiAgcHJpdmF0ZSBfYXBwbHlGaWx0ZXJzRm9yT25lRW50aXR5KGZpbHRlcnM6IEFraXRhRmlsdGVyPFM+W10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHk6IGdldEVudGl0eVR5cGU8Uz4sIGluZGV4OiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheTogZ2V0RW50aXR5VHlwZTxTPltdIHwgSGFzaE1hcDxnZXRFbnRpdHlUeXBlPFM+Pikge1xuICAgIHJldHVybiBmaWx0ZXJzLmV2ZXJ5KChmaWx0ZXI6IEFraXRhRmlsdGVyPFM+KSA9PiB7XG4gICAgICBpZiAoZmlsdGVyLnByZWRpY2F0ZSkge1xuICAgICAgICByZXR1cm4gISFmaWx0ZXIucHJlZGljYXRlKGVudGl0eSwgaW5kZXgsIGFycmF5LCBmaWx0ZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgaW5zdGFudGlhdGVQbHVnaW4oaWQ6IEkpOiBQIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuIl19