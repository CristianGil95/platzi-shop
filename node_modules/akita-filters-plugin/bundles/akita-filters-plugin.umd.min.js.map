{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://akita-filters-plugin/lib/filters-utils.ts","ng://akita-filters-plugin/lib/akita-filters-store.ts","ng://akita-filters-plugin/lib/akita-filters-query.ts","ng://akita-filters-plugin/lib/akita-filters-plugin.ts","ng://akita-filters-plugin/lib/bonus/akita-mat-data-source.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","defaultFilter","index","array","filter","isObject","isString","searchFilter","isDefined","searchKey","inObj","keys","some","toLocaleLowerCase","includes","createFilter","filterParams","str","id","guid","name","toString","charAt","toUpperCase","substr","undefined","predicate","hide","order","server","AkitaFiltersStore","storeName","_super","tslib_1.__extends","StoreConfig","EntityStore","AkitaFiltersQuery","store","_this","QueryConfig","sortBy","sortByOrder","Order","ASC","QueryEntity","AkitaFiltersPlugin","query","params","entityIds","_server","filtersStoreName","getStore","_filtersStore","_filtersQuery","_selectFilters$","filtersQuery","selectAll","_selectFiltersAll$","filterBy","_selectSortBy$","select","state","sort","withServer","onChangeFilter","options","listObservable","withSort","selectSortBy","merge","subscribe","returnOnChange","getNormalizedFilters","isObservable","newValue","set","hasServer","selectFilters","getFilters","getAll","getServerFilters","selectAllByFilters","asObject","combineLatest","getQuery","pipe","map","_a","_b","filters","unkNowEntity","_applyFiltersForHashMap","entities","_applyFiltersForArray","setFilter","isUndefined","entity","filtersStore","upsert","removeFilter","remove","clearFilters","getFilterValue","hasEntity","getEntity","getSortValue","getValue","setSortBy","update","result","sortByKey","sortByOrderKey","tslib_1.__values","_c","asQueryParams","_serialize","destroy","__store__","obj","k","encodeURIComponent","join","entitiesFiltered","every","_sortBy_1","isFunction","compareValues","concat","__spread","a","hashMapFiltered","forEach","entityKey","_applyFiltersForOneEntity","instantiatePlugin","EntityCollectionPlugin","AkitaMatDataSource","akitaFilters","_paginator","_sort","_internalPageChanges","Subject","_renderData","BehaviorSubject","_disconnect","_renderChangesSubscription","Subscription","EMPTY","_dataQuery","_filters","_hasCustomFilters","_count$","_selectAllByFilter$","_updateChangeSubscription","searchQuery","search","sortChange","takeUntil","sortValue","direction","DESC","initialized","setDefaultSort","paginator","_updateCount","count","_updatePaginator","_pageData","data","startIndex","pageIndex","pageSize","slice","addFilter","sortColumn","selectCount","asObservable","getCount","pageChange","page","of","paginatedData","unsubscribe","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","newPageIndex","min","connect","disconnect","complete","DataSource","inKey"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// import { isDefined, isObject, isString } from 'akita';\nimport { AkitaFilter } from './akita-filters-store';\nimport {isDefined, isString, isObject, HashMap, getEntityType} from '@datorama/akita';\n\n/**\n * Helper function to do a default filter\n */\nexport function defaultFilter<E = any, S = any>(\n  value: E | getEntityType<S>,\n  index: number, array: E[] | HashMap<getEntityType<E>>,\n  filter: AkitaFilter<E, S> ): boolean {\n  if ( isObject(value) && isString(filter.value) ) {\n    return searchFilter(filter.value, value);\n  }\n  return isDefined(filter.value) ? filter.value === value : !!value;\n}\n\n/**\n * Helper function to do search on all string element\n */\nexport function searchFilter( searchKey: string, inObj: Object ): boolean {\n  return isString(searchKey)  && Object.keys(inObj).some(function( key ) {\n    return isString(inObj[key]) && inObj[key].toLocaleLowerCase().includes(searchKey.toLocaleLowerCase());\n  });\n}\n\n/**\n * Helper function to do search in one key of an object\n */\nexport function searchFilterIn( searchKey: string, inObj: Object, inKey: string ): boolean {\n  return  isString(searchKey)\n    && isString(inKey)\n    && isString(inObj[inKey])\n    && inObj[inKey].toLocaleLowerCase().includes(searchKey.toLocaleLowerCase());\n}\n","\nimport { defaultFilter } from './filters-utils';\nimport {EntityState, EntityStore, getEntityType, guid, HashMap, ID, SortByOptions, StoreConfig} from '@datorama/akita';\n\nfunction capitalize(str: string): string {\n  return str.charAt(0).toUpperCase() + str.substr(1);\n}\n\nexport interface AkitaFilter<S extends EntityState, E = getEntityType<S>> {\n  id: ID;\n  /** A corresponding name for display the filter, by default, it will be ${id): ${value}  */\n  name?: string;\n  /** set the order for filter, by default, it is 10 */\n  order?: number;\n  /** The filter value, this will be used to compute name, or getting the current value, to initiate your form */\n  value?: any;\n  /** If you want to have filter that is not displayed on the list */\n  hide?: boolean;\n  /** If you have enabled server filter, specify witch filters will be call to server, default to false. */\n  server?: boolean;\n  /** The function to apply filters, by default use defaultFilter helpers, that will search the value in the object */\n  predicate: ( entity: E, index: number, array: E[] | HashMap<E>, filter: AkitaFilter<S> ) => boolean;\n  /** add any other data you want to add **/\n  [key: string]: any;\n}\n\nexport function createFilter<S extends EntityState, E = getEntityType<S>>( filterParams: Partial<AkitaFilter<S, E>> ) {\n  const id = filterParams.id ? filterParams.id : guid();\n  const name = filterParams.name || (filterParams.value && filterParams.id ?\n    `${capitalize(filterParams.id.toString())}: ${filterParams.value.toString()}` : undefined);\n\n  if ( !filterParams.predicate && filterParams.value ) {\n    /** use default function, if not provided */\n    // @ts-ignore\n    filterParams.predicate = defaultFilter;\n  }\n\n  return { id, name, hide: false, order: 10, server: false, ...filterParams } as AkitaFilter<S>;\n}\n\nexport interface FiltersState<S extends EntityState, E = getEntityType<S>> extends EntityState<AkitaFilter<S, E>> {\n  sort: SortByOptions<any>;\n}\n\n@StoreConfig({ name: 'filters' })\nexport class AkitaFiltersStore<S extends EntityState> extends EntityStore<FiltersState<S>, AkitaFilter<S>> {\n  constructor( storeName: string ) {\n    super(undefined, { name: storeName });\n  }\n}\n","import { AkitaFilter, FiltersState, AkitaFiltersStore } from './akita-filters-store';\nimport {EntityState, getEntityType, Order, QueryConfig, QueryEntity} from '@datorama/akita';\n\n\n@QueryConfig({\n  sortBy: 'order',\n  sortByOrder: Order.ASC\n})\nexport class AkitaFiltersQuery<S extends EntityState> extends QueryEntity<FiltersState<S>, AkitaFilter<S>, string> {\n  constructor(protected store: AkitaFiltersStore<S>) {\n    super(store);\n  }\n}\n","import {AkitaFilter, AkitaFiltersStore, createFilter, FiltersState} from './akita-filters-store';\nimport {AkitaFiltersQuery} from './akita-filters-query';\nimport {combineLatest, isObservable, merge, Observable, ObservedValueOf, of} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {\n  compareValues,\n  EntityCollectionPlugin,\n  EntityState,\n  EntityStore,\n  getEntityType,\n  getIDType,\n  HashMap,\n  ID,\n  isFunction,\n  isUndefined,\n  OrArray,\n  QueryEntity,\n  SelectAllOptionsA,\n  SelectAllOptionsB,\n  SelectAllOptionsC,\n  SelectAllOptionsD,\n  SelectAllOptionsE,\n  SortByOptions\n} from '@datorama/akita';\n\nexport interface FiltersParams<S extends EntityState> {\n  filtersStoreName?: string;\n  entityIds?: OrArray<getIDType<S>>;\n\n  [key: string]: any;\n}\n\ninterface NormalizedFilterOptions {\n  withSort?: boolean;\n  asQueryParams?: boolean;\n  sortByKey?: string;\n  sortByOrderKey?: string;\n}\n\nexport class AkitaFiltersPlugin<S extends EntityState, E = getEntityType<S>, I = OrArray<getIDType<S>>, P = any>\n  extends EntityCollectionPlugin<S, P> {\n\n  private readonly _filtersStore: AkitaFiltersStore<S>;\n  private readonly _filtersQuery: AkitaFiltersQuery<S>;\n  private _server: boolean = false;\n\n  private _selectFilters$: Observable<AkitaFilter<S>[]>;\n  private readonly _selectSortBy$: Observable<SortByOptions<E> | null>;\n  private readonly _selectFiltersAll$: Observable<AkitaFilter<S>[]>;\n\n  constructor(protected query: QueryEntity<S>, private params: FiltersParams<S> = {}) {\n    super(query, params.entityIds);\n    this.params = {...{filtersStoreName: this.getStore().storeName + 'Filters'}, ...params};\n\n    this._filtersStore = new AkitaFiltersStore<S>(this.params.filtersStoreName);\n    this._filtersQuery = new AkitaFiltersQuery<S>(this._filtersStore);\n\n    this._selectFilters$ = this.filtersQuery.selectAll({sortBy: 'order'});\n    this._selectFiltersAll$ = this.filtersQuery.selectAll({sortBy: 'order', filterBy: filter => !filter.hide});\n    this._selectSortBy$ = this.filtersQuery.select(state => state && state.sort ? state.sort : null);\n  }\n\n  get filtersStore(): AkitaFiltersStore<S> {\n    return this._filtersStore;\n  }\n\n  get filtersQuery(): AkitaFiltersQuery<S> {\n    return this._filtersQuery;\n  }\n\n  /**\n   *  Add support of filters from server. Provide a function that will be call each time a filter changes\n   *\n   *  new AkitaFilterPlugins(query).withServer((filters) => {\n   *      return this.api.getData(filters);\n   *  });\n   *\n   *  Return false to not add in store. if you want to manage the store in your own.\n   */\n  withServer(\n    onChangeFilter: (filtersNormalized: string | HashMap<any>) => any | boolean,\n    options: NormalizedFilterOptions = {}): AkitaFiltersPlugin<S, E, I, P> {\n    this._server = true;\n\n    // Change default select filters to remove server filters, if you use selectAllByFilters();\n    this._selectFilters$ = this._filtersQuery.selectAll({sortBy: 'order', filterBy: filter => !filter.server});\n\n    const listObservable: Array<Observable<any>> = [];\n    listObservable.push(this._filtersQuery.selectAll({sortBy: 'order', filterBy: filter => filter.server}));\n\n    if (options.withSort) {\n      listObservable.push(this.selectSortBy());\n    }\n    merge<Observable<getEntityType<S>[]> | Observable<SortByOptions<E> | null>>(listObservable).subscribe(() => {\n      const returnOnChange: boolean | Observable<getEntityType<S>[]> = onChangeFilter(this.getNormalizedFilters(options));\n\n      if (returnOnChange !== false && isObservable(returnOnChange)) {\n        returnOnChange.subscribe((newValue: getEntityType<S>[]) => {\n          this.getStore().set(newValue);\n        });\n      }\n    });\n    return this;\n  }\n\n  /** Return true, if server is configured **/\n  hasServer(): boolean {\n    return this._server;\n  }\n\n  /**\n   *  Select all filters\n   *\n   *  Note: Only all filters not hided (with hide=true), will not be displayed. If you want it, call directly to:\n   * `this.filtersQuery.selectAll()`\n   *\n   *\n   */\n  selectFilters(): Observable<AkitaFilter<S>[]> {\n    return this._selectFiltersAll$;\n  }\n\n  /**\n   * Get all the current snapshot filters\n   *\n   *  Note: filters with hide=true, will not be displayed. If you want it, call directly to:\n   * `this.filtersQuery.getAll()`\n   */\n  getFilters(): AkitaFilter<S>[] {\n    return this._filtersQuery.getAll({filterBy: filter => !filter.hide});\n  }\n\n  /**\n   * Get all the current snapshot server filters (only if server is available else return default not hidden filters)\n   *\n   *  Note: filters with server=false, will not be displayed. If you want it, call directly to:\n   * `this.filtersQuery.getAll()`\n   */\n  getServerFilters(): AkitaFilter<S>[] {\n    return this._server ? this._filtersQuery.getAll({filterBy: filter => !filter.server}) : this.getFilters();\n  }\n\n  /**\n   * Select All Entity with apply filter to it, and updated with any change (entity or filter)\n   * Will not apply sort, if need return   asObject:true !\n   */\n  selectAllByFilters(options?: SelectAllOptionsA<E>\n    | SelectAllOptionsB<E> | SelectAllOptionsC<E> |\n    SelectAllOptionsD<E> | SelectAllOptionsE<E> | any): Observable<getEntityType<S>[] | HashMap<getEntityType<S>>> {\n    if (options && options.asObject) {\n      return combineLatest(this._selectFilters$, this.getQuery().selectAll(options)).pipe(\n        map(([filters, entities]) => {\n          const unkNowEntity: unknown = entities;\n          return this._applyFiltersForHashMap((unkNowEntity as HashMap<getEntityType<S>>), filters);\n        })\n      );\n    } else {\n\n      return combineLatest(this._selectFilters$, this.getQuery().selectAll(options), this.selectSortBy()).pipe(\n        map(([filters, entities, sort]) => {\n          const unkNowEntity: unknown = entities;\n          return this._applyFiltersForArray((unkNowEntity as getEntityType<S>[]), filters, sort);\n        })\n      );\n    }\n  }\n\n  /**\n   * Create or update a filter\n   */\n  setFilter(filter: Partial<AkitaFilter<S>>) {\n    if (this._server && isUndefined(typeof filter.server)) {\n      filter.server = true;\n    }\n    const entity = createFilter(filter);\n    this.filtersStore.upsert(entity.id, entity);\n  }\n\n  /**\n   * Remove a Filter\n   */\n  removeFilter(id: ID) {\n    this.filtersStore.remove(id);\n  }\n\n  /**\n   * Clear all filters\n   */\n  clearFilters() {\n    this.filtersStore.remove();\n  }\n\n  /**\n   * Get filter value, return null, if value not available\n   */\n  getFilterValue<T = any>(id: string): T | null {\n    if (this.filtersQuery.hasEntity(id)) {\n      const entity: AkitaFilter<S> = this.filtersQuery.getEntity(id);\n      return entity.value ? entity.value : null;\n    }\n\n    return null;\n  }\n\n  /**\n   * Get filter value, return null, if value not available\n   */\n  getSortValue(): SortByOptions<E> | null {\n    const state: FiltersState<S> = this.filtersQuery.getValue();\n    return state.sort ? state.sort : null;\n  }\n\n  /**\n   * Select Sort by value\n   */\n  public selectSortBy(): Observable<SortByOptions<E> | null> {\n    return this._selectSortBy$;\n  }\n\n  /**\n   * Set orderBy\n   */\n  setSortBy(order: SortByOptions<E>) {\n    this.filtersStore.update({sort: order});\n  }\n\n  /**\n   * Get the filters normalized as key value or as query params.\n   * This can be useful for server-side filtering\n   */\n  getNormalizedFilters(options: NormalizedFilterOptions = {}): string | HashMap<any> {\n    const result = {};\n    options = {sortByKey: 'sortBy', sortByOrderKey: 'sortByOrder', ...options};\n\n    for (const filter of this.getServerFilters()) {\n      result[filter.id] = filter.value;\n    }\n\n    if (options.withSort) {\n      const sort = this.getSortValue();\n      result[options.sortByKey] = sort.sortBy;\n      result[options.sortByOrderKey] = sort.sortByOrder;\n    }\n\n    if (options.asQueryParams) {\n      return this._serialize(result);\n    }\n\n    return result;\n  }\n\n  destroy() {\n    this.clearFilters();\n  }\n\n\n\n  /** This method is responsible for getting access to the query. */\n  protected getQuery(): QueryEntity<S> {\n    return this.query;\n  }\n\n  /** This method is responsible for getting access to the store. */\n  protected getStore(): EntityStore<S> {\n    return this.getQuery().__store__;\n  }\n\n  private _serialize(obj) {\n    return Object.keys(obj)\n      .map(k => `${encodeURIComponent(k)}=${encodeURIComponent(obj[k])}`)\n      .join('&');\n  }\n\n  private _applyFiltersForArray(\n    entities: getEntityType<S>[],\n    filters: AkitaFilter<S>[],\n    sort: ObservedValueOf<Observable<SortByOptions<E> | null>>): getEntityType<S>[] {\n    let entitiesFiltered = entities;\n    if (filters.length !== 0) {\n      entitiesFiltered = entities.filter((entity: getEntityType<S>, index: number, array: getEntityType<S>[]) => {\n        return filters.every((filter: AkitaFilter<S>) => {\n          if (filter.predicate) {\n            return !!filter.predicate(entity, index, array, filter);\n          }\n          return true;\n        });\n      });\n    }\n\n    if (sort && sort.sortBy) {\n      const _sortBy: any = isFunction(sort.sortBy) ? sort.sortBy : compareValues(sort.sortBy, sort.sortByOrder);\n      entitiesFiltered = [...entitiesFiltered.sort((a, b) => _sortBy(a, b, entities))];\n    }\n    return entitiesFiltered;\n  }\n\n  private _applyFiltersForHashMap(\n    entities: HashMap<getEntityType<S>>,\n    filters: AkitaFilter<S>[]): HashMap<getEntityType<S>> {\n    if (filters.length === 0) {\n      return entities;\n    }\n      const hashMapFiltered: HashMap<getEntityType<S>> = {};\n      Object.keys(entities).forEach((entityKey: string, index: number) => {\n        const entity: getEntityType<S> = entities[entityKey] as getEntityType<S>;\n        if (this._applyFiltersForOneEntity(filters, entity, index, entities)) {\n          hashMapFiltered[entityKey] = entity;\n        }\n      });\n\n      return hashMapFiltered;\n  }\n\n  private _applyFiltersForOneEntity(filters: AkitaFilter<S>[],\n                                    entity: getEntityType<S>, index: number,\n                                    array: getEntityType<S>[] | HashMap<getEntityType<S>>) {\n    return filters.every((filter: AkitaFilter<S>) => {\n      if (filter.predicate) {\n        return !!filter.predicate(entity, index, array, filter);\n      }\n      return true;\n    });\n  }\n\n  protected instantiatePlugin(id: I): P {\n    return null;\n  }\n}\n","import {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject, combineLatest, merge, Observable, of, Subject, Subscription} from 'rxjs';\nimport {EntityState, getEntityType, ID, Order, QueryEntity} from '@datorama/akita';\nimport {AkitaFilter} from '../akita-filters-store';\nimport {AkitaFiltersPlugin} from '../akita-filters-plugin';\nimport {map, takeUntil, tap} from 'rxjs/operators';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\n\nexport class AkitaMatDataSource<S extends EntityState = any, E = getEntityType<S>> extends DataSource<E> {\n\n\n\n\n  /**\n   * Data source to use an Akita EntityStore with a Material table\n   * @see : https://material.angular.io/components/table/overview\n   *\n   * @param query string : [Mandatory] the akita Query Entity, you wan to use to this data source.\n   * @param akitaFilters string [Optional] If you want to provide an AkitaFilters that you use externally. Else it will create a new one.\n   */\n  constructor(query: QueryEntity<getEntityType<S>> | any, akitaFilters?: AkitaFiltersPlugin<S, E>) {\n    super();\n    this._dataQuery = query;\n\n    this._filters = akitaFilters ? akitaFilters : new AkitaFiltersPlugin<S, E>(query);\n    this._hasCustomFilters = !!akitaFilters;\n    this._count$ = new BehaviorSubject(0);\n\n    let count = 0;\n    // @ts-ignore ignore, as without options, we will allways have an Array.\n    this._selectAllByFilter$ = this._filters.selectAllByFilters();\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * @param searchQuery teh string use to search\n   */\n  set filter(searchQuery: string) {\n    this.search = searchQuery;\n  }\n\n  /**\n   * filter all the list by a search term.\n   *\n   * use like a property :\n   * akitaMatDataSourceInstance.search = 'term';\n   * @param searchQuery the string use to search\n   */\n  set search(searchQuery: string) {\n    if (searchQuery === '') {\n      this._filters.removeFilter('search');\n    } else {\n      this._filters.setFilter({id: 'search', value: searchQuery});\n    }\n  }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  set sort(sort: MatSort) {\n    this._sort = sort;\n    sort.sortChange.pipe(takeUntil(this._disconnect)).subscribe((sortValue: Sort) => {\n      this._filters.setSortBy({\n        sortBy: sortValue.active as keyof E,\n        sortByOrder: sortValue.direction === 'desc' ? Order.DESC : Order.ASC\n      });\n    });\n\n    sort.initialized.subscribe(() => {\n      this.setDefaultSort(sort.active as keyof E, sort.direction === 'desc' ? Order.DESC : Order.ASC);\n    });\n  }\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator {\n    return this._paginator;\n  }\n\n  set paginator(paginator: MatPaginator) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * @deprecated use get akitaFiltersPlugin\n   */\n  get AkitaFilters(): AkitaFiltersPlugin<S, E, any> {\n    return this._filters;\n  }\n  /**\n   * Access to AkitaFiltersPlugins, usefull to interact with all filters\n   */\n  get akitaFiltersPlugIn(): AkitaFiltersPlugin<S, E> {\n    return this._filters;\n  }\n\n  private _dataQuery: QueryEntity<E>;\n  private readonly _filters: AkitaFiltersPlugin<S, E>;\n  /** if set a custom filter plugins, do not delete all in disconnect() **/\n  private _hasCustomFilters: boolean;\n  private _paginator: MatPaginator = null;\n  private _sort: MatSort = null;\n\n  private _selectAllByFilter$: Observable<E[]>;\n  private _count$: BehaviorSubject<number>;\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<E[]>([]);\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _disconnect = new Subject<void>();\n\n\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  private _updateCount(value: E[]) {\n    const count = value.length ? value.length : 0;\n    if (count !== this._count$.getValue()) {\n      this._count$.next(count);\n\n      this._updatePaginator(count);\n    }\n  }\n\n  /**\n   * Paginate the data (client-side). If you're using server-side pagination,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private _pageData(data: E[]) {\n    this._updateCount(data);\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice(startIndex, startIndex + this.paginator.pageSize);\n  }\n\n  /**\n   *  add a filter to filters plugins\n   */\n  addFilter(filter: Partial<AkitaFilter<S>>): void {\n    this._filters.setFilter(filter);\n  }\n\n  /**\n   *  add a filter to filters plugins\n   */\n  setFilter(filter: Partial<AkitaFilter<S>>): void {\n    this._filters.setFilter(filter);\n  }\n\n  /**\n   * Remove a AkitaFilter\n   */\n  removeFilter(id: ID): void {\n    this._filters.removeFilter(id);\n  }\n\n  /**\n   * Clear all filters\n   */\n  clearFilters(): void {\n    this._filters.clearFilters();\n  }\n\n  /**\n   * Get filter value, return null, if value not available\n   */\n  getFilterValue<V = E>(id: string): V | null {\n    return this._filters.getFilterValue(id);\n  }\n\n  /**\n   * Set the default sort\n   * @param sortColumn the colum name present in your object\n   * @param direction string the direction for sorting (asc or desc). Default asc.\n   */\n  public setDefaultSort(\n    sortColumn: keyof E,\n    direction: 'asc' | 'desc' = 'asc'\n  ) {\n    this._filters.setSortBy({\n      sortBy: sortColumn,\n      sortByOrder: direction === 'desc' ? Order.DESC : Order.ASC\n    });\n  }\n\n  /**\n   * Select Count filtered results.\n   */\n  selectCount(): Observable<number> {\n    return this._count$.asObservable();\n  }\n\n  /**\n   * Select Count filtered results.\n   */\n  getCount(): number {\n    return this._count$.getValue();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n      merge(\n        this._paginator.page,\n        this._internalPageChanges,\n        this._paginator.initialized\n      ) as Observable<PageEvent|void> :\n      of(null);\n\n    const paginatedData = combineLatest(this._selectAllByFilter$, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.pipe(takeUntil(this._disconnect)).subscribe(data => this._renderData.next(data));\n    this._internalPageChanges.next();\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Function used by matTable to subscribe to the data\n   */\n  connect(): Observable<E[]> {\n    return this._renderData;\n  }\n\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect(): void {\n    if (!this._hasCustomFilters) {\n      this._filters.clearFilters();\n      this._filters.destroy();\n    }\n    this._disconnect.next();\n    this._disconnect.complete();\n  }\n}\n"]}