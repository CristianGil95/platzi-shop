/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DataSource } from '@angular/cdk/table';
import { BehaviorSubject, combineLatest, merge, of, Subject, Subscription } from 'rxjs';
import { Order } from '@datorama/akita';
import { AkitaFiltersPlugin } from '../akita-filters-plugin';
import { map, takeUntil } from 'rxjs/operators';
/**
 * @template S, E
 */
export class AkitaMatDataSource extends DataSource {
    /**
     * Data source to use an Akita EntityStore with a Material table
     * @see : https://material.angular.io/components/table/overview
     *
     * @param {?} query string : [Mandatory] the akita Query Entity, you wan to use to this data source.
     * @param {?=} akitaFilters string [Optional] If you want to provide an AkitaFilters that you use externally. Else it will create a new one.
     */
    constructor(query, akitaFilters) {
        super();
        this._paginator = null;
        this._sort = null;
        /**
         * Used to react to internal changes of the paginator that are made by the data source itself.
         */
        this._internalPageChanges = new Subject();
        /**
         * Stream emitting render data to the table (depends on ordered data changes).
         */
        this._renderData = new BehaviorSubject([]);
        /**
         * Used to react to internal changes of the paginator that are made by the data source itself.
         */
        this._disconnect = new Subject();
        /**
         * Subscription to the changes that should trigger an update to the table's rendered rows, such
         * as filtering, sorting, pagination, or base data changes.
         */
        this._renderChangesSubscription = Subscription.EMPTY;
        this._dataQuery = query;
        this._filters = akitaFilters ? akitaFilters : new AkitaFiltersPlugin(query);
        this._hasCustomFilters = !!akitaFilters;
        this._count$ = new BehaviorSubject(0);
        /** @type {?} */
        let count = 0;
        // @ts-ignore ignore, as without options, we will allways have an Array.
        this._selectAllByFilter$ = this._filters.selectAllByFilters();
        this._updateChangeSubscription();
    }
    /**
     * @param {?} searchQuery teh string use to search
     * @return {?}
     */
    set filter(searchQuery) {
        this.search = searchQuery;
    }
    /**
     * filter all the list by a search term.
     *
     * use like a property :
     * akitaMatDataSourceInstance.search = 'term';
     * @param {?} searchQuery the string use to search
     * @return {?}
     */
    set search(searchQuery) {
        if (searchQuery === '') {
            this._filters.removeFilter('search');
        }
        else {
            this._filters.setFilter({ id: 'search', value: searchQuery });
        }
    }
    /**
     * Instance of the MatSort directive used by the table to control its sorting. Sort changes
     * emitted by the MatSort will trigger an update to the table's rendered data.
     * @param {?} sort
     * @return {?}
     */
    set sort(sort) {
        this._sort = sort;
        sort.sortChange.pipe(takeUntil(this._disconnect)).subscribe((/**
         * @param {?} sortValue
         * @return {?}
         */
        (sortValue) => {
            this._filters.setSortBy({
                sortBy: (/** @type {?} */ (sortValue.active)),
                sortByOrder: sortValue.direction === 'desc' ? Order.DESC : Order.ASC
            });
        }));
        sort.initialized.subscribe((/**
         * @return {?}
         */
        () => {
            this.setDefaultSort((/** @type {?} */ (sort.active)), sort.direction === 'desc' ? Order.DESC : Order.ASC);
        }));
    }
    /**
     * Instance of the MatPaginator component used by the table to control what page of the data is
     * displayed. Page changes emitted by the MatPaginator will trigger an update to the
     * table's rendered data.
     *
     * Note that the data source uses the paginator's properties to calculate which page of data
     * should be displayed. If the paginator receives its properties as template inputs,
     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been
     * initialized before assigning it to this data source.
     * @return {?}
     */
    get paginator() {
        return this._paginator;
    }
    /**
     * @param {?} paginator
     * @return {?}
     */
    set paginator(paginator) {
        this._paginator = paginator;
        this._updateChangeSubscription();
    }
    /**
     * @deprecated use get akitaFiltersPlugin
     * @return {?}
     */
    get AkitaFilters() {
        return this._filters;
    }
    /**
     * Access to AkitaFiltersPlugins, usefull to interact with all filters
     * @return {?}
     */
    get akitaFiltersPlugIn() {
        return this._filters;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    _updateCount(value) {
        /** @type {?} */
        const count = value.length ? value.length : 0;
        if (count !== this._count$.getValue()) {
            this._count$.next(count);
            this._updatePaginator(count);
        }
    }
    /**
     * Paginate the data (client-side). If you're using server-side pagination,
     * this would be replaced by requesting the appropriate data from the server.
     * @private
     * @param {?} data
     * @return {?}
     */
    _pageData(data) {
        this._updateCount(data);
        if (!this.paginator) {
            return data;
        }
        /** @type {?} */
        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;
        return data.slice(startIndex, startIndex + this.paginator.pageSize);
    }
    /**
     *  add a filter to filters plugins
     * @param {?} filter
     * @return {?}
     */
    addFilter(filter) {
        this._filters.setFilter(filter);
    }
    /**
     *  add a filter to filters plugins
     * @param {?} filter
     * @return {?}
     */
    setFilter(filter) {
        this._filters.setFilter(filter);
    }
    /**
     * Remove a AkitaFilter
     * @param {?} id
     * @return {?}
     */
    removeFilter(id) {
        this._filters.removeFilter(id);
    }
    /**
     * Clear all filters
     * @return {?}
     */
    clearFilters() {
        this._filters.clearFilters();
    }
    /**
     * Get filter value, return null, if value not available
     * @template V
     * @param {?} id
     * @return {?}
     */
    getFilterValue(id) {
        return this._filters.getFilterValue(id);
    }
    /**
     * Set the default sort
     * @param {?} sortColumn the colum name present in your object
     * @param {?=} direction string the direction for sorting (asc or desc). Default asc.
     * @return {?}
     */
    setDefaultSort(sortColumn, direction = 'asc') {
        this._filters.setSortBy({
            sortBy: sortColumn,
            sortByOrder: direction === 'desc' ? Order.DESC : Order.ASC
        });
    }
    /**
     * Select Count filtered results.
     * @return {?}
     */
    selectCount() {
        return this._count$.asObservable();
    }
    /**
     * Select Count filtered results.
     * @return {?}
     */
    getCount() {
        return this._count$.getValue();
    }
    /**
     * Subscribe to changes that should trigger an update to the table's rendered rows. When the
     * changes occur, process the current state of the filter, sort, and pagination along with
     * the provided base data and send it to the table for rendering.
     * @return {?}
     */
    _updateChangeSubscription() {
        // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.
        // The events should emit whenever the component emits a change or initializes, or if no
        // component is provided, a stream with just a null event should be provided.
        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the
        // pipeline can progress to the next step. Note that the value from these streams are not used,
        // they purely act as a signal to progress in the pipeline.
        // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.
        // The events should emit whenever the component emits a change or initializes, or if no
        // component is provided, a stream with just a null event should be provided.
        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the
        // pipeline can progress to the next step. Note that the value from these streams are not used,
        // they purely act as a signal to progress in the pipeline.
        /** @type {?} */
        const pageChange = this._paginator ?
            (/** @type {?} */ (merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized))) :
            of(null);
        /** @type {?} */
        const paginatedData = combineLatest(this._selectAllByFilter$, pageChange)
            .pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        ([data]) => this._pageData(data))));
        // Watched for paged data changes and send the result to the table to render.
        this._renderChangesSubscription.unsubscribe();
        this._renderChangesSubscription = paginatedData.pipe(takeUntil(this._disconnect)).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => this._renderData.next(data)));
        this._internalPageChanges.next();
    }
    /**
     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page
     * index does not exceed the paginator's last page. Values are changed in a resolved promise to
     * guard against making property changes within a round of change detection.
     * @param {?} filteredDataLength
     * @return {?}
     */
    _updatePaginator(filteredDataLength) {
        Promise.resolve().then((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const paginator = this.paginator;
            if (!paginator) {
                return;
            }
            paginator.length = filteredDataLength;
            // If the page index is set beyond the page, reduce it to the last page.
            if (paginator.pageIndex > 0) {
                /** @type {?} */
                const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;
                /** @type {?} */
                const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);
                if (newPageIndex !== paginator.pageIndex) {
                    paginator.pageIndex = newPageIndex;
                    // Since the paginator only emits after user-generated changes,
                    // we need our own stream so we know to should re-render the data.
                    this._internalPageChanges.next();
                }
            }
        }));
    }
    /**
     * Function used by matTable to subscribe to the data
     * @return {?}
     */
    connect() {
        return this._renderData;
    }
    /**
     * Used by the MatTable. Called when it is destroyed. No-op.
     * \@docs-private
     * @return {?}
     */
    disconnect() {
        if (!this._hasCustomFilters) {
            this._filters.clearFilters();
            this._filters.destroy();
        }
        this._disconnect.next();
        this._disconnect.complete();
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._dataQuery;
    /**
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._filters;
    /**
     * if set a custom filter plugins, do not delete all in disconnect() *
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._hasCustomFilters;
    /**
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._paginator;
    /**
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._sort;
    /**
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._selectAllByFilter$;
    /**
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._count$;
    /**
     * Used to react to internal changes of the paginator that are made by the data source itself.
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._internalPageChanges;
    /**
     * Stream emitting render data to the table (depends on ordered data changes).
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._renderData;
    /**
     * Used to react to internal changes of the paginator that are made by the data source itself.
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._disconnect;
    /**
     * Subscription to the changes that should trigger an update to the table's rendered rows, such
     * as filtering, sorting, pagination, or base data changes.
     * @type {?}
     */
    AkitaMatDataSource.prototype._renderChangesSubscription;
}
//# sourceMappingURL=data:application/json;base64,