/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { AkitaFiltersStore, createFilter } from './akita-filters-store';
import { AkitaFiltersQuery } from './akita-filters-query';
import { combineLatest, isObservable, merge } from 'rxjs';
import { map } from 'rxjs/operators';
import { compareValues, EntityCollectionPlugin, isFunction, isUndefined } from '@datorama/akita';
/**
 * @record
 * @template S
 */
export function FiltersParams() { }
if (false) {
    /** @type {?|undefined} */
    FiltersParams.prototype.filtersStoreName;
    /** @type {?|undefined} */
    FiltersParams.prototype.entityIds;
    /* Skipping unhandled member: [key: string]: any;*/
}
/**
 * @record
 */
function NormalizedFilterOptions() { }
if (false) {
    /** @type {?|undefined} */
    NormalizedFilterOptions.prototype.withSort;
    /** @type {?|undefined} */
    NormalizedFilterOptions.prototype.asQueryParams;
    /** @type {?|undefined} */
    NormalizedFilterOptions.prototype.sortByKey;
    /** @type {?|undefined} */
    NormalizedFilterOptions.prototype.sortByOrderKey;
}
/**
 * @template S, E, I, P
 */
export class AkitaFiltersPlugin extends EntityCollectionPlugin {
    /**
     * @param {?} query
     * @param {?=} params
     */
    constructor(query, params = {}) {
        super(query, params.entityIds);
        this.query = query;
        this.params = params;
        this._server = false;
        this.params = Object.assign({ filtersStoreName: this.getStore().storeName + 'Filters' }, params);
        this._filtersStore = new AkitaFiltersStore(this.params.filtersStoreName);
        this._filtersQuery = new AkitaFiltersQuery(this._filtersStore);
        this._selectFilters$ = this.filtersQuery.selectAll({ sortBy: 'order' });
        this._selectFiltersAll$ = this.filtersQuery.selectAll({ sortBy: 'order', filterBy: (/**
             * @param {?} filter
             * @return {?}
             */
            filter => !filter.hide) });
        this._selectSortBy$ = this.filtersQuery.select((/**
         * @param {?} state
         * @return {?}
         */
        state => state && state.sort ? state.sort : null));
    }
    /**
     * @return {?}
     */
    get filtersStore() {
        return this._filtersStore;
    }
    /**
     * @return {?}
     */
    get filtersQuery() {
        return this._filtersQuery;
    }
    /**
     *  Add support of filters from server. Provide a function that will be call each time a filter changes
     *
     *  new AkitaFilterPlugins(query).withServer((filters) => {
     *      return this.api.getData(filters);
     *  });
     *
     *  Return false to not add in store. if you want to manage the store in your own.
     * @param {?} onChangeFilter
     * @param {?=} options
     * @return {?}
     */
    withServer(onChangeFilter, options = {}) {
        this._server = true;
        // Change default select filters to remove server filters, if you use selectAllByFilters();
        this._selectFilters$ = this._filtersQuery.selectAll({ sortBy: 'order', filterBy: (/**
             * @param {?} filter
             * @return {?}
             */
            filter => !filter.server) });
        /** @type {?} */
        const listObservable = [];
        listObservable.push(this._filtersQuery.selectAll({ sortBy: 'order', filterBy: (/**
             * @param {?} filter
             * @return {?}
             */
            filter => filter.server) }));
        if (options.withSort) {
            listObservable.push(this.selectSortBy());
        }
        merge(listObservable).subscribe((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const returnOnChange = onChangeFilter(this.getNormalizedFilters(options));
            if (returnOnChange !== false && isObservable(returnOnChange)) {
                returnOnChange.subscribe((/**
                 * @param {?} newValue
                 * @return {?}
                 */
                (newValue) => {
                    this.getStore().set(newValue);
                }));
            }
        }));
        return this;
    }
    /**
     * Return true, if server is configured *
     * @return {?}
     */
    hasServer() {
        return this._server;
    }
    /**
     *  Select all filters
     *
     *  Note: Only all filters not hided (with hide=true), will not be displayed. If you want it, call directly to:
     * `this.filtersQuery.selectAll()`
     *
     *
     * @return {?}
     */
    selectFilters() {
        return this._selectFiltersAll$;
    }
    /**
     * Get all the current snapshot filters
     *
     *  Note: filters with hide=true, will not be displayed. If you want it, call directly to:
     * `this.filtersQuery.getAll()`
     * @return {?}
     */
    getFilters() {
        return this._filtersQuery.getAll({ filterBy: (/**
             * @param {?} filter
             * @return {?}
             */
            filter => !filter.hide) });
    }
    /**
     * Get all the current snapshot server filters (only if server is available else return default not hidden filters)
     *
     *  Note: filters with server=false, will not be displayed. If you want it, call directly to:
     * `this.filtersQuery.getAll()`
     * @return {?}
     */
    getServerFilters() {
        return this._server ? this._filtersQuery.getAll({ filterBy: (/**
             * @param {?} filter
             * @return {?}
             */
            filter => !filter.server) }) : this.getFilters();
    }
    /**
     * Select All Entity with apply filter to it, and updated with any change (entity or filter)
     * Will not apply sort, if need return   asObject:true !
     * @param {?=} options
     * @return {?}
     */
    selectAllByFilters(options) {
        if (options && options.asObject) {
            return combineLatest(this._selectFilters$, this.getQuery().selectAll(options)).pipe(map((/**
             * @param {?} __0
             * @return {?}
             */
            ([filters, entities]) => {
                /** @type {?} */
                const unkNowEntity = entities;
                return this._applyFiltersForHashMap(((/** @type {?} */ (unkNowEntity))), filters);
            })));
        }
        else {
            return combineLatest(this._selectFilters$, this.getQuery().selectAll(options), this.selectSortBy()).pipe(map((/**
             * @param {?} __0
             * @return {?}
             */
            ([filters, entities, sort]) => {
                /** @type {?} */
                const unkNowEntity = entities;
                return this._applyFiltersForArray(((/** @type {?} */ (unkNowEntity))), filters, sort);
            })));
        }
    }
    /**
     * Create or update a filter
     * @param {?} filter
     * @return {?}
     */
    setFilter(filter) {
        if (this._server && isUndefined(typeof filter.server)) {
            filter.server = true;
        }
        /** @type {?} */
        const entity = createFilter(filter);
        this.filtersStore.upsert(entity.id, entity);
    }
    /**
     * Remove a Filter
     * @param {?} id
     * @return {?}
     */
    removeFilter(id) {
        this.filtersStore.remove(id);
    }
    /**
     * Clear all filters
     * @return {?}
     */
    clearFilters() {
        this.filtersStore.remove();
    }
    /**
     * Get filter value, return null, if value not available
     * @template T
     * @param {?} id
     * @return {?}
     */
    getFilterValue(id) {
        if (this.filtersQuery.hasEntity(id)) {
            /** @type {?} */
            const entity = this.filtersQuery.getEntity(id);
            return entity.value ? entity.value : null;
        }
        return null;
    }
    /**
     * Get filter value, return null, if value not available
     * @return {?}
     */
    getSortValue() {
        /** @type {?} */
        const state = this.filtersQuery.getValue();
        return state.sort ? state.sort : null;
    }
    /**
     * Select Sort by value
     * @return {?}
     */
    selectSortBy() {
        return this._selectSortBy$;
    }
    /**
     * Set orderBy
     * @param {?} order
     * @return {?}
     */
    setSortBy(order) {
        this.filtersStore.update({ sort: order });
    }
    /**
     * Get the filters normalized as key value or as query params.
     * This can be useful for server-side filtering
     * @param {?=} options
     * @return {?}
     */
    getNormalizedFilters(options = {}) {
        /** @type {?} */
        const result = {};
        options = Object.assign({ sortByKey: 'sortBy', sortByOrderKey: 'sortByOrder' }, options);
        for (const filter of this.getServerFilters()) {
            result[filter.id] = filter.value;
        }
        if (options.withSort) {
            /** @type {?} */
            const sort = this.getSortValue();
            result[options.sortByKey] = sort.sortBy;
            result[options.sortByOrderKey] = sort.sortByOrder;
        }
        if (options.asQueryParams) {
            return this._serialize(result);
        }
        return result;
    }
    /**
     * @return {?}
     */
    destroy() {
        this.clearFilters();
    }
    /**
     * This method is responsible for getting access to the query.
     * @protected
     * @return {?}
     */
    getQuery() {
        return this.query;
    }
    /**
     * This method is responsible for getting access to the store.
     * @protected
     * @return {?}
     */
    getStore() {
        return this.getQuery().__store__;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    _serialize(obj) {
        return Object.keys(obj)
            .map((/**
         * @param {?} k
         * @return {?}
         */
        k => `${encodeURIComponent(k)}=${encodeURIComponent(obj[k])}`))
            .join('&');
    }
    /**
     * @private
     * @param {?} entities
     * @param {?} filters
     * @param {?} sort
     * @return {?}
     */
    _applyFiltersForArray(entities, filters, sort) {
        /** @type {?} */
        let entitiesFiltered = entities;
        if (filters.length !== 0) {
            entitiesFiltered = entities.filter((/**
             * @param {?} entity
             * @param {?} index
             * @param {?} array
             * @return {?}
             */
            (entity, index, array) => {
                return filters.every((/**
                 * @param {?} filter
                 * @return {?}
                 */
                (filter) => {
                    if (filter.predicate) {
                        return !!filter.predicate(entity, index, array, filter);
                    }
                    return true;
                }));
            }));
        }
        if (sort && sort.sortBy) {
            /** @type {?} */
            const _sortBy = isFunction(sort.sortBy) ? sort.sortBy : compareValues(sort.sortBy, sort.sortByOrder);
            entitiesFiltered = [...entitiesFiltered.sort((/**
                 * @param {?} a
                 * @param {?} b
                 * @return {?}
                 */
                (a, b) => _sortBy(a, b, entities)))];
        }
        return entitiesFiltered;
    }
    /**
     * @private
     * @param {?} entities
     * @param {?} filters
     * @return {?}
     */
    _applyFiltersForHashMap(entities, filters) {
        if (filters.length === 0) {
            return entities;
        }
        /** @type {?} */
        const hashMapFiltered = {};
        Object.keys(entities).forEach((/**
         * @param {?} entityKey
         * @param {?} index
         * @return {?}
         */
        (entityKey, index) => {
            /** @type {?} */
            const entity = (/** @type {?} */ (entities[entityKey]));
            if (this._applyFiltersForOneEntity(filters, entity, index, entities)) {
                hashMapFiltered[entityKey] = entity;
            }
        }));
        return hashMapFiltered;
    }
    /**
     * @private
     * @param {?} filters
     * @param {?} entity
     * @param {?} index
     * @param {?} array
     * @return {?}
     */
    _applyFiltersForOneEntity(filters, entity, index, array) {
        return filters.every((/**
         * @param {?} filter
         * @return {?}
         */
        (filter) => {
            if (filter.predicate) {
                return !!filter.predicate(entity, index, array, filter);
            }
            return true;
        }));
    }
    /**
     * @protected
     * @param {?} id
     * @return {?}
     */
    instantiatePlugin(id) {
        return null;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    AkitaFiltersPlugin.prototype._filtersStore;
    /**
     * @type {?}
     * @private
     */
    AkitaFiltersPlugin.prototype._filtersQuery;
    /**
     * @type {?}
     * @private
     */
    AkitaFiltersPlugin.prototype._server;
    /**
     * @type {?}
     * @private
     */
    AkitaFiltersPlugin.prototype._selectFilters$;
    /**
     * @type {?}
     * @private
     */
    AkitaFiltersPlugin.prototype._selectSortBy$;
    /**
     * @type {?}
     * @private
     */
    AkitaFiltersPlugin.prototype._selectFiltersAll$;
    /**
     * @type {?}
     * @protected
     */
    AkitaFiltersPlugin.prototype.query;
    /**
     * @type {?}
     * @private
     */
    AkitaFiltersPlugin.prototype.params;
}
//# sourceMappingURL=data:application/json;base64,