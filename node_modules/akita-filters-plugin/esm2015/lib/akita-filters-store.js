/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { defaultFilter } from './filters-utils';
import { EntityStore, guid, StoreConfig } from '@datorama/akita';
/**
 * @param {?} str
 * @return {?}
 */
function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.substr(1);
}
/**
 * @record
 * @template S, E
 */
export function AkitaFilter() { }
if (false) {
    /** @type {?} */
    AkitaFilter.prototype.id;
    /**
     * A corresponding name for display the filter, by default, it will be ${id): ${value}
     * @type {?|undefined}
     */
    AkitaFilter.prototype.name;
    /**
     * set the order for filter, by default, it is 10
     * @type {?|undefined}
     */
    AkitaFilter.prototype.order;
    /**
     * The filter value, this will be used to compute name, or getting the current value, to initiate your form
     * @type {?|undefined}
     */
    AkitaFilter.prototype.value;
    /**
     * If you want to have filter that is not displayed on the list
     * @type {?|undefined}
     */
    AkitaFilter.prototype.hide;
    /**
     * If you have enabled server filter, specify witch filters will be call to server, default to false.
     * @type {?|undefined}
     */
    AkitaFilter.prototype.server;
    /**
     * The function to apply filters, by default use defaultFilter helpers, that will search the value in the object
     * @type {?}
     */
    AkitaFilter.prototype.predicate;
    /* Skipping unhandled member: [key: string]: any;*/
}
/**
 * @template S, E
 * @param {?} filterParams
 * @return {?}
 */
export function createFilter(filterParams) {
    /** @type {?} */
    const id = filterParams.id ? filterParams.id : guid();
    /** @type {?} */
    const name = filterParams.name || (filterParams.value && filterParams.id ?
        `${capitalize(filterParams.id.toString())}: ${filterParams.value.toString()}` : undefined);
    if (!filterParams.predicate && filterParams.value) {
        /** use default function, if not provided */
        // @ts-ignore
        filterParams.predicate = defaultFilter;
    }
    return (/** @type {?} */ (Object.assign({ id, name, hide: false, order: 10, server: false }, filterParams)));
}
/**
 * @record
 * @template S, E
 */
export function FiltersState() { }
if (false) {
    /** @type {?} */
    FiltersState.prototype.sort;
}
/**
 * @template S
 */
let AkitaFiltersStore = /**
 * @template S
 */
class AkitaFiltersStore extends EntityStore {
    /**
     * @param {?} storeName
     */
    constructor(storeName) {
        super(undefined, { name: storeName });
    }
};
AkitaFiltersStore.ctorParameters = () => [
    { type: String }
];
/**
 * @template S
 */
AkitaFiltersStore = tslib_1.__decorate([
    StoreConfig({ name: 'filters' }),
    tslib_1.__metadata("design:paramtypes", [String])
], AkitaFiltersStore);
export { AkitaFiltersStore };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWtpdGEtZmlsdGVycy1zdG9yZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FraXRhLWZpbHRlcnMtcGx1Z2luLyIsInNvdXJjZXMiOlsibGliL2FraXRhLWZpbHRlcnMtc3RvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFjLFdBQVcsRUFBaUIsSUFBSSxFQUE4QixXQUFXLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQzs7Ozs7QUFFdkgsU0FBUyxVQUFVLENBQUMsR0FBVztJQUM3QixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNyRCxDQUFDOzs7OztBQUVELGlDQWdCQzs7O0lBZkMseUJBQU87Ozs7O0lBRVAsMkJBQWM7Ozs7O0lBRWQsNEJBQWU7Ozs7O0lBRWYsNEJBQVk7Ozs7O0lBRVosMkJBQWU7Ozs7O0lBRWYsNkJBQWlCOzs7OztJQUVqQixnQ0FBb0c7Ozs7Ozs7O0FBS3RHLE1BQU0sVUFBVSxZQUFZLENBQStDLFlBQXdDOztVQUMzRyxFQUFFLEdBQUcsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFOztVQUMvQyxJQUFJLEdBQUcsWUFBWSxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLElBQUksWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hFLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxZQUFZLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUU1RixJQUFLLENBQUMsWUFBWSxDQUFDLFNBQVMsSUFBSSxZQUFZLENBQUMsS0FBSyxFQUFHO1FBQ25ELDRDQUE0QztRQUM1QyxhQUFhO1FBQ2IsWUFBWSxDQUFDLFNBQVMsR0FBRyxhQUFhLENBQUM7S0FDeEM7SUFFRCxPQUFPLG1DQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLElBQUssWUFBWSxHQUFvQixDQUFDO0FBQ2hHLENBQUM7Ozs7O0FBRUQsa0NBRUM7OztJQURDLDRCQUF5Qjs7Ozs7SUFJZCxpQkFBaUI7OztNQUFqQixpQkFBeUMsU0FBUSxXQUE0Qzs7OztJQUN4RyxZQUFhLFNBQWlCO1FBQzVCLEtBQUssQ0FBQyxTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUN4QyxDQUFDO0NBQ0YsQ0FBQTs7Ozs7OztBQUpZLGlCQUFpQjtJQUQ3QixXQUFXLENBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUM7O0dBQ3BCLGlCQUFpQixDQUk3QjtTQUpZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgZGVmYXVsdEZpbHRlciB9IGZyb20gJy4vZmlsdGVycy11dGlscyc7XG5pbXBvcnQge0VudGl0eVN0YXRlLCBFbnRpdHlTdG9yZSwgZ2V0RW50aXR5VHlwZSwgZ3VpZCwgSGFzaE1hcCwgSUQsIFNvcnRCeU9wdGlvbnMsIFN0b3JlQ29uZmlnfSBmcm9tICdAZGF0b3JhbWEvYWtpdGEnO1xuXG5mdW5jdGlvbiBjYXBpdGFsaXplKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zdWJzdHIoMSk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWtpdGFGaWx0ZXI8UyBleHRlbmRzIEVudGl0eVN0YXRlLCBFID0gZ2V0RW50aXR5VHlwZTxTPj4ge1xuICBpZDogSUQ7XG4gIC8qKiBBIGNvcnJlc3BvbmRpbmcgbmFtZSBmb3IgZGlzcGxheSB0aGUgZmlsdGVyLCBieSBkZWZhdWx0LCBpdCB3aWxsIGJlICR7aWQpOiAke3ZhbHVlfSAgKi9cbiAgbmFtZT86IHN0cmluZztcbiAgLyoqIHNldCB0aGUgb3JkZXIgZm9yIGZpbHRlciwgYnkgZGVmYXVsdCwgaXQgaXMgMTAgKi9cbiAgb3JkZXI/OiBudW1iZXI7XG4gIC8qKiBUaGUgZmlsdGVyIHZhbHVlLCB0aGlzIHdpbGwgYmUgdXNlZCB0byBjb21wdXRlIG5hbWUsIG9yIGdldHRpbmcgdGhlIGN1cnJlbnQgdmFsdWUsIHRvIGluaXRpYXRlIHlvdXIgZm9ybSAqL1xuICB2YWx1ZT86IGFueTtcbiAgLyoqIElmIHlvdSB3YW50IHRvIGhhdmUgZmlsdGVyIHRoYXQgaXMgbm90IGRpc3BsYXllZCBvbiB0aGUgbGlzdCAqL1xuICBoaWRlPzogYm9vbGVhbjtcbiAgLyoqIElmIHlvdSBoYXZlIGVuYWJsZWQgc2VydmVyIGZpbHRlciwgc3BlY2lmeSB3aXRjaCBmaWx0ZXJzIHdpbGwgYmUgY2FsbCB0byBzZXJ2ZXIsIGRlZmF1bHQgdG8gZmFsc2UuICovXG4gIHNlcnZlcj86IGJvb2xlYW47XG4gIC8qKiBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgZmlsdGVycywgYnkgZGVmYXVsdCB1c2UgZGVmYXVsdEZpbHRlciBoZWxwZXJzLCB0aGF0IHdpbGwgc2VhcmNoIHRoZSB2YWx1ZSBpbiB0aGUgb2JqZWN0ICovXG4gIHByZWRpY2F0ZTogKCBlbnRpdHk6IEUsIGluZGV4OiBudW1iZXIsIGFycmF5OiBFW10gfCBIYXNoTWFwPEU+LCBmaWx0ZXI6IEFraXRhRmlsdGVyPFM+ICkgPT4gYm9vbGVhbjtcbiAgLyoqIGFkZCBhbnkgb3RoZXIgZGF0YSB5b3Ugd2FudCB0byBhZGQgKiovXG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZpbHRlcjxTIGV4dGVuZHMgRW50aXR5U3RhdGUsIEUgPSBnZXRFbnRpdHlUeXBlPFM+PiggZmlsdGVyUGFyYW1zOiBQYXJ0aWFsPEFraXRhRmlsdGVyPFMsIEU+PiApIHtcbiAgY29uc3QgaWQgPSBmaWx0ZXJQYXJhbXMuaWQgPyBmaWx0ZXJQYXJhbXMuaWQgOiBndWlkKCk7XG4gIGNvbnN0IG5hbWUgPSBmaWx0ZXJQYXJhbXMubmFtZSB8fCAoZmlsdGVyUGFyYW1zLnZhbHVlICYmIGZpbHRlclBhcmFtcy5pZCA/XG4gICAgYCR7Y2FwaXRhbGl6ZShmaWx0ZXJQYXJhbXMuaWQudG9TdHJpbmcoKSl9OiAke2ZpbHRlclBhcmFtcy52YWx1ZS50b1N0cmluZygpfWAgOiB1bmRlZmluZWQpO1xuXG4gIGlmICggIWZpbHRlclBhcmFtcy5wcmVkaWNhdGUgJiYgZmlsdGVyUGFyYW1zLnZhbHVlICkge1xuICAgIC8qKiB1c2UgZGVmYXVsdCBmdW5jdGlvbiwgaWYgbm90IHByb3ZpZGVkICovXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGZpbHRlclBhcmFtcy5wcmVkaWNhdGUgPSBkZWZhdWx0RmlsdGVyO1xuICB9XG5cbiAgcmV0dXJuIHsgaWQsIG5hbWUsIGhpZGU6IGZhbHNlLCBvcmRlcjogMTAsIHNlcnZlcjogZmFsc2UsIC4uLmZpbHRlclBhcmFtcyB9IGFzIEFraXRhRmlsdGVyPFM+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpbHRlcnNTdGF0ZTxTIGV4dGVuZHMgRW50aXR5U3RhdGUsIEUgPSBnZXRFbnRpdHlUeXBlPFM+PiBleHRlbmRzIEVudGl0eVN0YXRlPEFraXRhRmlsdGVyPFMsIEU+PiB7XG4gIHNvcnQ6IFNvcnRCeU9wdGlvbnM8YW55Pjtcbn1cblxuQFN0b3JlQ29uZmlnKHsgbmFtZTogJ2ZpbHRlcnMnIH0pXG5leHBvcnQgY2xhc3MgQWtpdGFGaWx0ZXJzU3RvcmU8UyBleHRlbmRzIEVudGl0eVN0YXRlPiBleHRlbmRzIEVudGl0eVN0b3JlPEZpbHRlcnNTdGF0ZTxTPiwgQWtpdGFGaWx0ZXI8Uz4+IHtcbiAgY29uc3RydWN0b3IoIHN0b3JlTmFtZTogc3RyaW5nICkge1xuICAgIHN1cGVyKHVuZGVmaW5lZCwgeyBuYW1lOiBzdG9yZU5hbWUgfSk7XG4gIH1cbn1cbiJdfQ==