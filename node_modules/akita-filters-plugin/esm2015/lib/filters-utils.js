/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isDefined, isString, isObject } from '@datorama/akita';
/**
 * Helper function to do a default filter
 * @template E, S
 * @param {?} value
 * @param {?} index
 * @param {?} array
 * @param {?} filter
 * @return {?}
 */
export function defaultFilter(value, index, array, filter) {
    if (isObject(value) && isString(filter.value)) {
        return searchFilter(filter.value, value);
    }
    return isDefined(filter.value) ? filter.value === value : !!value;
}
/**
 * Helper function to do search on all string element
 * @param {?} searchKey
 * @param {?} inObj
 * @return {?}
 */
export function searchFilter(searchKey, inObj) {
    return isString(searchKey) && Object.keys(inObj).some((/**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return isString(inObj[key]) && inObj[key].toLocaleLowerCase().includes(searchKey.toLocaleLowerCase());
    }));
}
/**
 * Helper function to do search in one key of an object
 * @param {?} searchKey
 * @param {?} inObj
 * @param {?} inKey
 * @return {?}
 */
export function searchFilterIn(searchKey, inObj, inKey) {
    return isString(searchKey)
        && isString(inKey)
        && isString(inObj[inKey])
        && inObj[inKey].toLocaleLowerCase().includes(searchKey.toLocaleLowerCase());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVycy11dGlscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FraXRhLWZpbHRlcnMtcGx1Z2luLyIsInNvdXJjZXMiOlsibGliL2ZpbHRlcnMtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLE9BQU8sRUFBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBeUIsTUFBTSxpQkFBaUIsQ0FBQzs7Ozs7Ozs7OztBQUt0RixNQUFNLFVBQVUsYUFBYSxDQUMzQixLQUEyQixFQUMzQixLQUFhLEVBQUUsS0FBc0MsRUFDckQsTUFBeUI7SUFDekIsSUFBSyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRztRQUMvQyxPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzFDO0lBQ0QsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUNwRSxDQUFDOzs7Ozs7O0FBS0QsTUFBTSxVQUFVLFlBQVksQ0FBRSxTQUFpQixFQUFFLEtBQWE7SUFDNUQsT0FBTyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJOzs7O0lBQUMsVUFBVSxHQUFHO1FBQ2xFLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBQ3hHLENBQUMsRUFBQyxDQUFDO0FBQ0wsQ0FBQzs7Ozs7Ozs7QUFLRCxNQUFNLFVBQVUsY0FBYyxDQUFFLFNBQWlCLEVBQUUsS0FBYSxFQUFFLEtBQWE7SUFDN0UsT0FBUSxRQUFRLENBQUMsU0FBUyxDQUFDO1dBQ3RCLFFBQVEsQ0FBQyxLQUFLLENBQUM7V0FDZixRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1dBQ3RCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgeyBpc0RlZmluZWQsIGlzT2JqZWN0LCBpc1N0cmluZyB9IGZyb20gJ2FraXRhJztcbmltcG9ydCB7IEFraXRhRmlsdGVyIH0gZnJvbSAnLi9ha2l0YS1maWx0ZXJzLXN0b3JlJztcbmltcG9ydCB7aXNEZWZpbmVkLCBpc1N0cmluZywgaXNPYmplY3QsIEhhc2hNYXAsIGdldEVudGl0eVR5cGV9IGZyb20gJ0BkYXRvcmFtYS9ha2l0YSc7XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGRvIGEgZGVmYXVsdCBmaWx0ZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXI8RSA9IGFueSwgUyA9IGFueT4oXG4gIHZhbHVlOiBFIHwgZ2V0RW50aXR5VHlwZTxTPixcbiAgaW5kZXg6IG51bWJlciwgYXJyYXk6IEVbXSB8IEhhc2hNYXA8Z2V0RW50aXR5VHlwZTxFPj4sXG4gIGZpbHRlcjogQWtpdGFGaWx0ZXI8RSwgUz4gKTogYm9vbGVhbiB7XG4gIGlmICggaXNPYmplY3QodmFsdWUpICYmIGlzU3RyaW5nKGZpbHRlci52YWx1ZSkgKSB7XG4gICAgcmV0dXJuIHNlYXJjaEZpbHRlcihmaWx0ZXIudmFsdWUsIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gaXNEZWZpbmVkKGZpbHRlci52YWx1ZSkgPyBmaWx0ZXIudmFsdWUgPT09IHZhbHVlIDogISF2YWx1ZTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gZG8gc2VhcmNoIG9uIGFsbCBzdHJpbmcgZWxlbWVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VhcmNoRmlsdGVyKCBzZWFyY2hLZXk6IHN0cmluZywgaW5PYmo6IE9iamVjdCApOiBib29sZWFuIHtcbiAgcmV0dXJuIGlzU3RyaW5nKHNlYXJjaEtleSkgICYmIE9iamVjdC5rZXlzKGluT2JqKS5zb21lKGZ1bmN0aW9uKCBrZXkgKSB7XG4gICAgcmV0dXJuIGlzU3RyaW5nKGluT2JqW2tleV0pICYmIGluT2JqW2tleV0udG9Mb2NhbGVMb3dlckNhc2UoKS5pbmNsdWRlcyhzZWFyY2hLZXkudG9Mb2NhbGVMb3dlckNhc2UoKSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBkbyBzZWFyY2ggaW4gb25lIGtleSBvZiBhbiBvYmplY3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlYXJjaEZpbHRlckluKCBzZWFyY2hLZXk6IHN0cmluZywgaW5PYmo6IE9iamVjdCwgaW5LZXk6IHN0cmluZyApOiBib29sZWFuIHtcbiAgcmV0dXJuICBpc1N0cmluZyhzZWFyY2hLZXkpXG4gICAgJiYgaXNTdHJpbmcoaW5LZXkpXG4gICAgJiYgaXNTdHJpbmcoaW5PYmpbaW5LZXldKVxuICAgICYmIGluT2JqW2luS2V5XS50b0xvY2FsZUxvd2VyQ2FzZSgpLmluY2x1ZGVzKHNlYXJjaEtleS50b0xvY2FsZUxvd2VyQ2FzZSgpKTtcbn1cbiJdfQ==