{"version":3,"file":"akita-filters-plugin.js","sources":["ng://akita-filters-plugin/lib/filters-utils.ts","ng://akita-filters-plugin/lib/akita-filters-store.ts","ng://akita-filters-plugin/lib/akita-filters-query.ts","ng://akita-filters-plugin/lib/akita-filters-plugin.ts","ng://akita-filters-plugin/lib/bonus/akita-mat-data-source.ts"],"sourcesContent":["// import { isDefined, isObject, isString } from 'akita';\nimport { AkitaFilter } from './akita-filters-store';\nimport {isDefined, isString, isObject, HashMap, getEntityType} from '@datorama/akita';\n\n/**\n * Helper function to do a default filter\n */\nexport function defaultFilter<E = any, S = any>(\n  value: E | getEntityType<S>,\n  index: number, array: E[] | HashMap<getEntityType<E>>,\n  filter: AkitaFilter<E, S> ): boolean {\n  if ( isObject(value) && isString(filter.value) ) {\n    return searchFilter(filter.value, value);\n  }\n  return isDefined(filter.value) ? filter.value === value : !!value;\n}\n\n/**\n * Helper function to do search on all string element\n */\nexport function searchFilter( searchKey: string, inObj: Object ): boolean {\n  return isString(searchKey)  && Object.keys(inObj).some(function( key ) {\n    return isString(inObj[key]) && inObj[key].toLocaleLowerCase().includes(searchKey.toLocaleLowerCase());\n  });\n}\n\n/**\n * Helper function to do search in one key of an object\n */\nexport function searchFilterIn( searchKey: string, inObj: Object, inKey: string ): boolean {\n  return  isString(searchKey)\n    && isString(inKey)\n    && isString(inObj[inKey])\n    && inObj[inKey].toLocaleLowerCase().includes(searchKey.toLocaleLowerCase());\n}\n","\nimport { defaultFilter } from './filters-utils';\nimport {EntityState, EntityStore, getEntityType, guid, HashMap, ID, SortByOptions, StoreConfig} from '@datorama/akita';\n\nfunction capitalize(str: string): string {\n  return str.charAt(0).toUpperCase() + str.substr(1);\n}\n\nexport interface AkitaFilter<S extends EntityState, E = getEntityType<S>> {\n  id: ID;\n  /** A corresponding name for display the filter, by default, it will be ${id): ${value}  */\n  name?: string;\n  /** set the order for filter, by default, it is 10 */\n  order?: number;\n  /** The filter value, this will be used to compute name, or getting the current value, to initiate your form */\n  value?: any;\n  /** If you want to have filter that is not displayed on the list */\n  hide?: boolean;\n  /** If you have enabled server filter, specify witch filters will be call to server, default to false. */\n  server?: boolean;\n  /** The function to apply filters, by default use defaultFilter helpers, that will search the value in the object */\n  predicate: ( entity: E, index: number, array: E[] | HashMap<E>, filter: AkitaFilter<S> ) => boolean;\n  /** add any other data you want to add **/\n  [key: string]: any;\n}\n\nexport function createFilter<S extends EntityState, E = getEntityType<S>>( filterParams: Partial<AkitaFilter<S, E>> ) {\n  const id = filterParams.id ? filterParams.id : guid();\n  const name = filterParams.name || (filterParams.value && filterParams.id ?\n    `${capitalize(filterParams.id.toString())}: ${filterParams.value.toString()}` : undefined);\n\n  if ( !filterParams.predicate && filterParams.value ) {\n    /** use default function, if not provided */\n    // @ts-ignore\n    filterParams.predicate = defaultFilter;\n  }\n\n  return { id, name, hide: false, order: 10, server: false, ...filterParams } as AkitaFilter<S>;\n}\n\nexport interface FiltersState<S extends EntityState, E = getEntityType<S>> extends EntityState<AkitaFilter<S, E>> {\n  sort: SortByOptions<any>;\n}\n\n@StoreConfig({ name: 'filters' })\nexport class AkitaFiltersStore<S extends EntityState> extends EntityStore<FiltersState<S>, AkitaFilter<S>> {\n  constructor( storeName: string ) {\n    super(undefined, { name: storeName });\n  }\n}\n","import { AkitaFilter, FiltersState, AkitaFiltersStore } from './akita-filters-store';\nimport {EntityState, getEntityType, Order, QueryConfig, QueryEntity} from '@datorama/akita';\n\n\n@QueryConfig({\n  sortBy: 'order',\n  sortByOrder: Order.ASC\n})\nexport class AkitaFiltersQuery<S extends EntityState> extends QueryEntity<FiltersState<S>, AkitaFilter<S>, string> {\n  constructor(protected store: AkitaFiltersStore<S>) {\n    super(store);\n  }\n}\n","import {AkitaFilter, AkitaFiltersStore, createFilter, FiltersState} from './akita-filters-store';\nimport {AkitaFiltersQuery} from './akita-filters-query';\nimport {combineLatest, isObservable, merge, Observable, ObservedValueOf, of} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {\n  compareValues,\n  EntityCollectionPlugin,\n  EntityState,\n  EntityStore,\n  getEntityType,\n  getIDType,\n  HashMap,\n  ID,\n  isFunction,\n  isUndefined,\n  OrArray,\n  QueryEntity,\n  SelectAllOptionsA,\n  SelectAllOptionsB,\n  SelectAllOptionsC,\n  SelectAllOptionsD,\n  SelectAllOptionsE,\n  SortByOptions\n} from '@datorama/akita';\n\nexport interface FiltersParams<S extends EntityState> {\n  filtersStoreName?: string;\n  entityIds?: OrArray<getIDType<S>>;\n\n  [key: string]: any;\n}\n\ninterface NormalizedFilterOptions {\n  withSort?: boolean;\n  asQueryParams?: boolean;\n  sortByKey?: string;\n  sortByOrderKey?: string;\n}\n\nexport class AkitaFiltersPlugin<S extends EntityState, E = getEntityType<S>, I = OrArray<getIDType<S>>, P = any>\n  extends EntityCollectionPlugin<S, P> {\n\n  private readonly _filtersStore: AkitaFiltersStore<S>;\n  private readonly _filtersQuery: AkitaFiltersQuery<S>;\n  private _server: boolean = false;\n\n  private _selectFilters$: Observable<AkitaFilter<S>[]>;\n  private readonly _selectSortBy$: Observable<SortByOptions<E> | null>;\n  private readonly _selectFiltersAll$: Observable<AkitaFilter<S>[]>;\n\n  constructor(protected query: QueryEntity<S>, private params: FiltersParams<S> = {}) {\n    super(query, params.entityIds);\n    this.params = {...{filtersStoreName: this.getStore().storeName + 'Filters'}, ...params};\n\n    this._filtersStore = new AkitaFiltersStore<S>(this.params.filtersStoreName);\n    this._filtersQuery = new AkitaFiltersQuery<S>(this._filtersStore);\n\n    this._selectFilters$ = this.filtersQuery.selectAll({sortBy: 'order'});\n    this._selectFiltersAll$ = this.filtersQuery.selectAll({sortBy: 'order', filterBy: filter => !filter.hide});\n    this._selectSortBy$ = this.filtersQuery.select(state => state && state.sort ? state.sort : null);\n  }\n\n  get filtersStore(): AkitaFiltersStore<S> {\n    return this._filtersStore;\n  }\n\n  get filtersQuery(): AkitaFiltersQuery<S> {\n    return this._filtersQuery;\n  }\n\n  /**\n   *  Add support of filters from server. Provide a function that will be call each time a filter changes\n   *\n   *  new AkitaFilterPlugins(query).withServer((filters) => {\n   *      return this.api.getData(filters);\n   *  });\n   *\n   *  Return false to not add in store. if you want to manage the store in your own.\n   */\n  withServer(\n    onChangeFilter: (filtersNormalized: string | HashMap<any>) => any | boolean,\n    options: NormalizedFilterOptions = {}): AkitaFiltersPlugin<S, E, I, P> {\n    this._server = true;\n\n    // Change default select filters to remove server filters, if you use selectAllByFilters();\n    this._selectFilters$ = this._filtersQuery.selectAll({sortBy: 'order', filterBy: filter => !filter.server});\n\n    const listObservable: Array<Observable<any>> = [];\n    listObservable.push(this._filtersQuery.selectAll({sortBy: 'order', filterBy: filter => filter.server}));\n\n    if (options.withSort) {\n      listObservable.push(this.selectSortBy());\n    }\n    merge<Observable<getEntityType<S>[]> | Observable<SortByOptions<E> | null>>(listObservable).subscribe(() => {\n      const returnOnChange: boolean | Observable<getEntityType<S>[]> = onChangeFilter(this.getNormalizedFilters(options));\n\n      if (returnOnChange !== false && isObservable(returnOnChange)) {\n        returnOnChange.subscribe((newValue: getEntityType<S>[]) => {\n          this.getStore().set(newValue);\n        });\n      }\n    });\n    return this;\n  }\n\n  /** Return true, if server is configured **/\n  hasServer(): boolean {\n    return this._server;\n  }\n\n  /**\n   *  Select all filters\n   *\n   *  Note: Only all filters not hided (with hide=true), will not be displayed. If you want it, call directly to:\n   * `this.filtersQuery.selectAll()`\n   *\n   *\n   */\n  selectFilters(): Observable<AkitaFilter<S>[]> {\n    return this._selectFiltersAll$;\n  }\n\n  /**\n   * Get all the current snapshot filters\n   *\n   *  Note: filters with hide=true, will not be displayed. If you want it, call directly to:\n   * `this.filtersQuery.getAll()`\n   */\n  getFilters(): AkitaFilter<S>[] {\n    return this._filtersQuery.getAll({filterBy: filter => !filter.hide});\n  }\n\n  /**\n   * Get all the current snapshot server filters (only if server is available else return default not hidden filters)\n   *\n   *  Note: filters with server=false, will not be displayed. If you want it, call directly to:\n   * `this.filtersQuery.getAll()`\n   */\n  getServerFilters(): AkitaFilter<S>[] {\n    return this._server ? this._filtersQuery.getAll({filterBy: filter => !filter.server}) : this.getFilters();\n  }\n\n  /**\n   * Select All Entity with apply filter to it, and updated with any change (entity or filter)\n   * Will not apply sort, if need return   asObject:true !\n   */\n  selectAllByFilters(options?: SelectAllOptionsA<E>\n    | SelectAllOptionsB<E> | SelectAllOptionsC<E> |\n    SelectAllOptionsD<E> | SelectAllOptionsE<E> | any): Observable<getEntityType<S>[] | HashMap<getEntityType<S>>> {\n    if (options && options.asObject) {\n      return combineLatest(this._selectFilters$, this.getQuery().selectAll(options)).pipe(\n        map(([filters, entities]) => {\n          const unkNowEntity: unknown = entities;\n          return this._applyFiltersForHashMap((unkNowEntity as HashMap<getEntityType<S>>), filters);\n        })\n      );\n    } else {\n\n      return combineLatest(this._selectFilters$, this.getQuery().selectAll(options), this.selectSortBy()).pipe(\n        map(([filters, entities, sort]) => {\n          const unkNowEntity: unknown = entities;\n          return this._applyFiltersForArray((unkNowEntity as getEntityType<S>[]), filters, sort);\n        })\n      );\n    }\n  }\n\n  /**\n   * Create or update a filter\n   */\n  setFilter(filter: Partial<AkitaFilter<S>>) {\n    if (this._server && isUndefined(typeof filter.server)) {\n      filter.server = true;\n    }\n    const entity = createFilter(filter);\n    this.filtersStore.upsert(entity.id, entity);\n  }\n\n  /**\n   * Remove a Filter\n   */\n  removeFilter(id: ID) {\n    this.filtersStore.remove(id);\n  }\n\n  /**\n   * Clear all filters\n   */\n  clearFilters() {\n    this.filtersStore.remove();\n  }\n\n  /**\n   * Get filter value, return null, if value not available\n   */\n  getFilterValue<T = any>(id: string): T | null {\n    if (this.filtersQuery.hasEntity(id)) {\n      const entity: AkitaFilter<S> = this.filtersQuery.getEntity(id);\n      return entity.value ? entity.value : null;\n    }\n\n    return null;\n  }\n\n  /**\n   * Get filter value, return null, if value not available\n   */\n  getSortValue(): SortByOptions<E> | null {\n    const state: FiltersState<S> = this.filtersQuery.getValue();\n    return state.sort ? state.sort : null;\n  }\n\n  /**\n   * Select Sort by value\n   */\n  public selectSortBy(): Observable<SortByOptions<E> | null> {\n    return this._selectSortBy$;\n  }\n\n  /**\n   * Set orderBy\n   */\n  setSortBy(order: SortByOptions<E>) {\n    this.filtersStore.update({sort: order});\n  }\n\n  /**\n   * Get the filters normalized as key value or as query params.\n   * This can be useful for server-side filtering\n   */\n  getNormalizedFilters(options: NormalizedFilterOptions = {}): string | HashMap<any> {\n    const result = {};\n    options = {sortByKey: 'sortBy', sortByOrderKey: 'sortByOrder', ...options};\n\n    for (const filter of this.getServerFilters()) {\n      result[filter.id] = filter.value;\n    }\n\n    if (options.withSort) {\n      const sort = this.getSortValue();\n      result[options.sortByKey] = sort.sortBy;\n      result[options.sortByOrderKey] = sort.sortByOrder;\n    }\n\n    if (options.asQueryParams) {\n      return this._serialize(result);\n    }\n\n    return result;\n  }\n\n  destroy() {\n    this.clearFilters();\n  }\n\n\n\n  /** This method is responsible for getting access to the query. */\n  protected getQuery(): QueryEntity<S> {\n    return this.query;\n  }\n\n  /** This method is responsible for getting access to the store. */\n  protected getStore(): EntityStore<S> {\n    return this.getQuery().__store__;\n  }\n\n  private _serialize(obj) {\n    return Object.keys(obj)\n      .map(k => `${encodeURIComponent(k)}=${encodeURIComponent(obj[k])}`)\n      .join('&');\n  }\n\n  private _applyFiltersForArray(\n    entities: getEntityType<S>[],\n    filters: AkitaFilter<S>[],\n    sort: ObservedValueOf<Observable<SortByOptions<E> | null>>): getEntityType<S>[] {\n    let entitiesFiltered = entities;\n    if (filters.length !== 0) {\n      entitiesFiltered = entities.filter((entity: getEntityType<S>, index: number, array: getEntityType<S>[]) => {\n        return filters.every((filter: AkitaFilter<S>) => {\n          if (filter.predicate) {\n            return !!filter.predicate(entity, index, array, filter);\n          }\n          return true;\n        });\n      });\n    }\n\n    if (sort && sort.sortBy) {\n      const _sortBy: any = isFunction(sort.sortBy) ? sort.sortBy : compareValues(sort.sortBy, sort.sortByOrder);\n      entitiesFiltered = [...entitiesFiltered.sort((a, b) => _sortBy(a, b, entities))];\n    }\n    return entitiesFiltered;\n  }\n\n  private _applyFiltersForHashMap(\n    entities: HashMap<getEntityType<S>>,\n    filters: AkitaFilter<S>[]): HashMap<getEntityType<S>> {\n    if (filters.length === 0) {\n      return entities;\n    }\n      const hashMapFiltered: HashMap<getEntityType<S>> = {};\n      Object.keys(entities).forEach((entityKey: string, index: number) => {\n        const entity: getEntityType<S> = entities[entityKey] as getEntityType<S>;\n        if (this._applyFiltersForOneEntity(filters, entity, index, entities)) {\n          hashMapFiltered[entityKey] = entity;\n        }\n      });\n\n      return hashMapFiltered;\n  }\n\n  private _applyFiltersForOneEntity(filters: AkitaFilter<S>[],\n                                    entity: getEntityType<S>, index: number,\n                                    array: getEntityType<S>[] | HashMap<getEntityType<S>>) {\n    return filters.every((filter: AkitaFilter<S>) => {\n      if (filter.predicate) {\n        return !!filter.predicate(entity, index, array, filter);\n      }\n      return true;\n    });\n  }\n\n  protected instantiatePlugin(id: I): P {\n    return null;\n  }\n}\n","import {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject, combineLatest, merge, Observable, of, Subject, Subscription} from 'rxjs';\nimport {EntityState, getEntityType, ID, Order, QueryEntity} from '@datorama/akita';\nimport {AkitaFilter} from '../akita-filters-store';\nimport {AkitaFiltersPlugin} from '../akita-filters-plugin';\nimport {map, takeUntil, tap} from 'rxjs/operators';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\n\nexport class AkitaMatDataSource<S extends EntityState = any, E = getEntityType<S>> extends DataSource<E> {\n\n\n\n\n  /**\n   * Data source to use an Akita EntityStore with a Material table\n   * @see : https://material.angular.io/components/table/overview\n   *\n   * @param query string : [Mandatory] the akita Query Entity, you wan to use to this data source.\n   * @param akitaFilters string [Optional] If you want to provide an AkitaFilters that you use externally. Else it will create a new one.\n   */\n  constructor(query: QueryEntity<getEntityType<S>> | any, akitaFilters?: AkitaFiltersPlugin<S, E>) {\n    super();\n    this._dataQuery = query;\n\n    this._filters = akitaFilters ? akitaFilters : new AkitaFiltersPlugin<S, E>(query);\n    this._hasCustomFilters = !!akitaFilters;\n    this._count$ = new BehaviorSubject(0);\n\n    let count = 0;\n    // @ts-ignore ignore, as without options, we will allways have an Array.\n    this._selectAllByFilter$ = this._filters.selectAllByFilters();\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * @param searchQuery teh string use to search\n   */\n  set filter(searchQuery: string) {\n    this.search = searchQuery;\n  }\n\n  /**\n   * filter all the list by a search term.\n   *\n   * use like a property :\n   * akitaMatDataSourceInstance.search = 'term';\n   * @param searchQuery the string use to search\n   */\n  set search(searchQuery: string) {\n    if (searchQuery === '') {\n      this._filters.removeFilter('search');\n    } else {\n      this._filters.setFilter({id: 'search', value: searchQuery});\n    }\n  }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  set sort(sort: MatSort) {\n    this._sort = sort;\n    sort.sortChange.pipe(takeUntil(this._disconnect)).subscribe((sortValue: Sort) => {\n      this._filters.setSortBy({\n        sortBy: sortValue.active as keyof E,\n        sortByOrder: sortValue.direction === 'desc' ? Order.DESC : Order.ASC\n      });\n    });\n\n    sort.initialized.subscribe(() => {\n      this.setDefaultSort(sort.active as keyof E, sort.direction === 'desc' ? Order.DESC : Order.ASC);\n    });\n  }\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator {\n    return this._paginator;\n  }\n\n  set paginator(paginator: MatPaginator) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * @deprecated use get akitaFiltersPlugin\n   */\n  get AkitaFilters(): AkitaFiltersPlugin<S, E, any> {\n    return this._filters;\n  }\n  /**\n   * Access to AkitaFiltersPlugins, usefull to interact with all filters\n   */\n  get akitaFiltersPlugIn(): AkitaFiltersPlugin<S, E> {\n    return this._filters;\n  }\n\n  private _dataQuery: QueryEntity<E>;\n  private readonly _filters: AkitaFiltersPlugin<S, E>;\n  /** if set a custom filter plugins, do not delete all in disconnect() **/\n  private _hasCustomFilters: boolean;\n  private _paginator: MatPaginator = null;\n  private _sort: MatSort = null;\n\n  private _selectAllByFilter$: Observable<E[]>;\n  private _count$: BehaviorSubject<number>;\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<E[]>([]);\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _disconnect = new Subject<void>();\n\n\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  private _updateCount(value: E[]) {\n    const count = value.length ? value.length : 0;\n    if (count !== this._count$.getValue()) {\n      this._count$.next(count);\n\n      this._updatePaginator(count);\n    }\n  }\n\n  /**\n   * Paginate the data (client-side). If you're using server-side pagination,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private _pageData(data: E[]) {\n    this._updateCount(data);\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice(startIndex, startIndex + this.paginator.pageSize);\n  }\n\n  /**\n   *  add a filter to filters plugins\n   */\n  addFilter(filter: Partial<AkitaFilter<S>>): void {\n    this._filters.setFilter(filter);\n  }\n\n  /**\n   *  add a filter to filters plugins\n   */\n  setFilter(filter: Partial<AkitaFilter<S>>): void {\n    this._filters.setFilter(filter);\n  }\n\n  /**\n   * Remove a AkitaFilter\n   */\n  removeFilter(id: ID): void {\n    this._filters.removeFilter(id);\n  }\n\n  /**\n   * Clear all filters\n   */\n  clearFilters(): void {\n    this._filters.clearFilters();\n  }\n\n  /**\n   * Get filter value, return null, if value not available\n   */\n  getFilterValue<V = E>(id: string): V | null {\n    return this._filters.getFilterValue(id);\n  }\n\n  /**\n   * Set the default sort\n   * @param sortColumn the colum name present in your object\n   * @param direction string the direction for sorting (asc or desc). Default asc.\n   */\n  public setDefaultSort(\n    sortColumn: keyof E,\n    direction: 'asc' | 'desc' = 'asc'\n  ) {\n    this._filters.setSortBy({\n      sortBy: sortColumn,\n      sortByOrder: direction === 'desc' ? Order.DESC : Order.ASC\n    });\n  }\n\n  /**\n   * Select Count filtered results.\n   */\n  selectCount(): Observable<number> {\n    return this._count$.asObservable();\n  }\n\n  /**\n   * Select Count filtered results.\n   */\n  getCount(): number {\n    return this._count$.getValue();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n      merge(\n        this._paginator.page,\n        this._internalPageChanges,\n        this._paginator.initialized\n      ) as Observable<PageEvent|void> :\n      of(null);\n\n    const paginatedData = combineLatest(this._selectAllByFilter$, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.pipe(takeUntil(this._disconnect)).subscribe(data => this._renderData.next(data));\n    this._internalPageChanges.next();\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Function used by matTable to subscribe to the data\n   */\n  connect(): Observable<E[]> {\n    return this._renderData;\n  }\n\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect(): void {\n    if (!this._hasCustomFilters) {\n      this._filters.clearFilters();\n      this._filters.destroy();\n    }\n    this._disconnect.next();\n    this._disconnect.complete();\n  }\n}\n"],"names":[],"mappings":"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"}