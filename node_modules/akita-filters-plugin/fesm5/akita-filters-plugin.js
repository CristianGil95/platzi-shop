import { __assign, __extends, __decorate, __metadata, __read, __values, __spread } from 'tslib';
import { isObject, isString, isDefined, guid, StoreConfig, EntityStore, QueryConfig, Order, QueryEntity, isUndefined, isFunction, compareValues, EntityCollectionPlugin } from '@datorama/akita';
import { merge, isObservable, combineLatest, Subject, BehaviorSubject, Subscription, of } from 'rxjs';
import { map, takeUntil } from 'rxjs/operators';
import { DataSource } from '@angular/cdk/table';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Helper function to do a default filter
 * @template E, S
 * @param {?} value
 * @param {?} index
 * @param {?} array
 * @param {?} filter
 * @return {?}
 */
function defaultFilter(value, index, array, filter) {
    if (isObject(value) && isString(filter.value)) {
        return searchFilter(filter.value, value);
    }
    return isDefined(filter.value) ? filter.value === value : !!value;
}
/**
 * Helper function to do search on all string element
 * @param {?} searchKey
 * @param {?} inObj
 * @return {?}
 */
function searchFilter(searchKey, inObj) {
    return isString(searchKey) && Object.keys(inObj).some((/**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return isString(inObj[key]) && inObj[key].toLocaleLowerCase().includes(searchKey.toLocaleLowerCase());
    }));
}
/**
 * Helper function to do search in one key of an object
 * @param {?} searchKey
 * @param {?} inObj
 * @param {?} inKey
 * @return {?}
 */
function searchFilterIn(searchKey, inObj, inKey) {
    return isString(searchKey)
        && isString(inKey)
        && isString(inObj[inKey])
        && inObj[inKey].toLocaleLowerCase().includes(searchKey.toLocaleLowerCase());
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} str
 * @return {?}
 */
function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.substr(1);
}
/**
 * @record
 * @template S, E
 */
function AkitaFilter() { }
if (false) {
    /** @type {?} */
    AkitaFilter.prototype.id;
    /**
     * A corresponding name for display the filter, by default, it will be ${id): ${value}
     * @type {?|undefined}
     */
    AkitaFilter.prototype.name;
    /**
     * set the order for filter, by default, it is 10
     * @type {?|undefined}
     */
    AkitaFilter.prototype.order;
    /**
     * The filter value, this will be used to compute name, or getting the current value, to initiate your form
     * @type {?|undefined}
     */
    AkitaFilter.prototype.value;
    /**
     * If you want to have filter that is not displayed on the list
     * @type {?|undefined}
     */
    AkitaFilter.prototype.hide;
    /**
     * If you have enabled server filter, specify witch filters will be call to server, default to false.
     * @type {?|undefined}
     */
    AkitaFilter.prototype.server;
    /**
     * The function to apply filters, by default use defaultFilter helpers, that will search the value in the object
     * @type {?}
     */
    AkitaFilter.prototype.predicate;
    /* Skipping unhandled member: [key: string]: any;*/
}
/**
 * @template S, E
 * @param {?} filterParams
 * @return {?}
 */
function createFilter(filterParams) {
    /** @type {?} */
    var id = filterParams.id ? filterParams.id : guid();
    /** @type {?} */
    var name = filterParams.name || (filterParams.value && filterParams.id ?
        capitalize(filterParams.id.toString()) + ": " + filterParams.value.toString() : undefined);
    if (!filterParams.predicate && filterParams.value) {
        /** use default function, if not provided */
        // @ts-ignore
        filterParams.predicate = defaultFilter;
    }
    return (/** @type {?} */ (__assign({ id: id, name: name, hide: false, order: 10, server: false }, filterParams)));
}
/**
 * @record
 * @template S, E
 */
function FiltersState() { }
if (false) {
    /** @type {?} */
    FiltersState.prototype.sort;
}
/**
 * @template S
 */
var AkitaFiltersStore = /** @class */ (function (_super) {
    __extends(AkitaFiltersStore, _super);
    function AkitaFiltersStore(storeName) {
        return _super.call(this, undefined, { name: storeName }) || this;
    }
    AkitaFiltersStore.ctorParameters = function () { return [
        { type: String }
    ]; };
    /**
     * @template S
     */
    AkitaFiltersStore = __decorate([
        StoreConfig({ name: 'filters' }),
        __metadata("design:paramtypes", [String])
    ], AkitaFiltersStore);
    return AkitaFiltersStore;
}(EntityStore));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template S
 */
var AkitaFiltersQuery = /** @class */ (function (_super) {
    __extends(AkitaFiltersQuery, _super);
    function AkitaFiltersQuery(store) {
        var _this = _super.call(this, store) || this;
        _this.store = store;
        return _this;
    }
    AkitaFiltersQuery.ctorParameters = function () { return [
        { type: AkitaFiltersStore }
    ]; };
    /**
     * @template S
     */
    AkitaFiltersQuery = __decorate([
        QueryConfig({
            sortBy: 'order',
            sortByOrder: Order.ASC
        }),
        __metadata("design:paramtypes", [AkitaFiltersStore])
    ], AkitaFiltersQuery);
    return AkitaFiltersQuery;
}(QueryEntity));
if (false) {
    /**
     * @type {?}
     * @protected
     */
    AkitaFiltersQuery.prototype.store;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 * @template S
 */
function FiltersParams() { }
if (false) {
    /** @type {?|undefined} */
    FiltersParams.prototype.filtersStoreName;
    /** @type {?|undefined} */
    FiltersParams.prototype.entityIds;
    /* Skipping unhandled member: [key: string]: any;*/
}
/**
 * @record
 */
function NormalizedFilterOptions() { }
if (false) {
    /** @type {?|undefined} */
    NormalizedFilterOptions.prototype.withSort;
    /** @type {?|undefined} */
    NormalizedFilterOptions.prototype.asQueryParams;
    /** @type {?|undefined} */
    NormalizedFilterOptions.prototype.sortByKey;
    /** @type {?|undefined} */
    NormalizedFilterOptions.prototype.sortByOrderKey;
}
/**
 * @template S, E, I, P
 */
var  /**
 * @template S, E, I, P
 */
AkitaFiltersPlugin = /** @class */ (function (_super) {
    __extends(AkitaFiltersPlugin, _super);
    function AkitaFiltersPlugin(query, params) {
        if (params === void 0) { params = {}; }
        var _this = _super.call(this, query, params.entityIds) || this;
        _this.query = query;
        _this.params = params;
        _this._server = false;
        _this.params = __assign({ filtersStoreName: _this.getStore().storeName + 'Filters' }, params);
        _this._filtersStore = new AkitaFiltersStore(_this.params.filtersStoreName);
        _this._filtersQuery = new AkitaFiltersQuery(_this._filtersStore);
        _this._selectFilters$ = _this.filtersQuery.selectAll({ sortBy: 'order' });
        _this._selectFiltersAll$ = _this.filtersQuery.selectAll({ sortBy: 'order', filterBy: (/**
             * @param {?} filter
             * @return {?}
             */
            function (filter) { return !filter.hide; }) });
        _this._selectSortBy$ = _this.filtersQuery.select((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return state && state.sort ? state.sort : null; }));
        return _this;
    }
    Object.defineProperty(AkitaFiltersPlugin.prototype, "filtersStore", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filtersStore;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AkitaFiltersPlugin.prototype, "filtersQuery", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filtersQuery;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *  Add support of filters from server. Provide a function that will be call each time a filter changes
     *
     *  new AkitaFilterPlugins(query).withServer((filters) => {
     *      return this.api.getData(filters);
     *  });
     *
     *  Return false to not add in store. if you want to manage the store in your own.
     */
    /**
     *  Add support of filters from server. Provide a function that will be call each time a filter changes
     *
     *  new AkitaFilterPlugins(query).withServer((filters) => {
     *      return this.api.getData(filters);
     *  });
     *
     *  Return false to not add in store. if you want to manage the store in your own.
     * @param {?} onChangeFilter
     * @param {?=} options
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.withServer = /**
     *  Add support of filters from server. Provide a function that will be call each time a filter changes
     *
     *  new AkitaFilterPlugins(query).withServer((filters) => {
     *      return this.api.getData(filters);
     *  });
     *
     *  Return false to not add in store. if you want to manage the store in your own.
     * @param {?} onChangeFilter
     * @param {?=} options
     * @return {?}
     */
    function (onChangeFilter, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        this._server = true;
        // Change default select filters to remove server filters, if you use selectAllByFilters();
        this._selectFilters$ = this._filtersQuery.selectAll({ sortBy: 'order', filterBy: (/**
             * @param {?} filter
             * @return {?}
             */
            function (filter) { return !filter.server; }) });
        /** @type {?} */
        var listObservable = [];
        listObservable.push(this._filtersQuery.selectAll({ sortBy: 'order', filterBy: (/**
             * @param {?} filter
             * @return {?}
             */
            function (filter) { return filter.server; }) }));
        if (options.withSort) {
            listObservable.push(this.selectSortBy());
        }
        merge(listObservable).subscribe((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var returnOnChange = onChangeFilter(_this.getNormalizedFilters(options));
            if (returnOnChange !== false && isObservable(returnOnChange)) {
                returnOnChange.subscribe((/**
                 * @param {?} newValue
                 * @return {?}
                 */
                function (newValue) {
                    _this.getStore().set(newValue);
                }));
            }
        }));
        return this;
    };
    /** Return true, if server is configured **/
    /**
     * Return true, if server is configured *
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.hasServer = /**
     * Return true, if server is configured *
     * @return {?}
     */
    function () {
        return this._server;
    };
    /**
     *  Select all filters
     *
     *  Note: Only all filters not hided (with hide=true), will not be displayed. If you want it, call directly to:
     * `this.filtersQuery.selectAll()`
     *
     *
     */
    /**
     *  Select all filters
     *
     *  Note: Only all filters not hided (with hide=true), will not be displayed. If you want it, call directly to:
     * `this.filtersQuery.selectAll()`
     *
     *
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.selectFilters = /**
     *  Select all filters
     *
     *  Note: Only all filters not hided (with hide=true), will not be displayed. If you want it, call directly to:
     * `this.filtersQuery.selectAll()`
     *
     *
     * @return {?}
     */
    function () {
        return this._selectFiltersAll$;
    };
    /**
     * Get all the current snapshot filters
     *
     *  Note: filters with hide=true, will not be displayed. If you want it, call directly to:
     * `this.filtersQuery.getAll()`
     */
    /**
     * Get all the current snapshot filters
     *
     *  Note: filters with hide=true, will not be displayed. If you want it, call directly to:
     * `this.filtersQuery.getAll()`
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.getFilters = /**
     * Get all the current snapshot filters
     *
     *  Note: filters with hide=true, will not be displayed. If you want it, call directly to:
     * `this.filtersQuery.getAll()`
     * @return {?}
     */
    function () {
        return this._filtersQuery.getAll({ filterBy: (/**
             * @param {?} filter
             * @return {?}
             */
            function (filter) { return !filter.hide; }) });
    };
    /**
     * Get all the current snapshot server filters (only if server is available else return default not hidden filters)
     *
     *  Note: filters with server=false, will not be displayed. If you want it, call directly to:
     * `this.filtersQuery.getAll()`
     */
    /**
     * Get all the current snapshot server filters (only if server is available else return default not hidden filters)
     *
     *  Note: filters with server=false, will not be displayed. If you want it, call directly to:
     * `this.filtersQuery.getAll()`
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.getServerFilters = /**
     * Get all the current snapshot server filters (only if server is available else return default not hidden filters)
     *
     *  Note: filters with server=false, will not be displayed. If you want it, call directly to:
     * `this.filtersQuery.getAll()`
     * @return {?}
     */
    function () {
        return this._server ? this._filtersQuery.getAll({ filterBy: (/**
             * @param {?} filter
             * @return {?}
             */
            function (filter) { return !filter.server; }) }) : this.getFilters();
    };
    /**
     * Select All Entity with apply filter to it, and updated with any change (entity or filter)
     * Will not apply sort, if need return   asObject:true !
     */
    /**
     * Select All Entity with apply filter to it, and updated with any change (entity or filter)
     * Will not apply sort, if need return   asObject:true !
     * @param {?=} options
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.selectAllByFilters = /**
     * Select All Entity with apply filter to it, and updated with any change (entity or filter)
     * Will not apply sort, if need return   asObject:true !
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        if (options && options.asObject) {
            return combineLatest(this._selectFilters$, this.getQuery().selectAll(options)).pipe(map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), filters = _b[0], entities = _b[1];
                /** @type {?} */
                var unkNowEntity = entities;
                return _this._applyFiltersForHashMap(((/** @type {?} */ (unkNowEntity))), filters);
            })));
        }
        else {
            return combineLatest(this._selectFilters$, this.getQuery().selectAll(options), this.selectSortBy()).pipe(map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 3), filters = _b[0], entities = _b[1], sort = _b[2];
                /** @type {?} */
                var unkNowEntity = entities;
                return _this._applyFiltersForArray(((/** @type {?} */ (unkNowEntity))), filters, sort);
            })));
        }
    };
    /**
     * Create or update a filter
     */
    /**
     * Create or update a filter
     * @param {?} filter
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.setFilter = /**
     * Create or update a filter
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        if (this._server && isUndefined(typeof filter.server)) {
            filter.server = true;
        }
        /** @type {?} */
        var entity = createFilter(filter);
        this.filtersStore.upsert(entity.id, entity);
    };
    /**
     * Remove a Filter
     */
    /**
     * Remove a Filter
     * @param {?} id
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.removeFilter = /**
     * Remove a Filter
     * @param {?} id
     * @return {?}
     */
    function (id) {
        this.filtersStore.remove(id);
    };
    /**
     * Clear all filters
     */
    /**
     * Clear all filters
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.clearFilters = /**
     * Clear all filters
     * @return {?}
     */
    function () {
        this.filtersStore.remove();
    };
    /**
     * Get filter value, return null, if value not available
     */
    /**
     * Get filter value, return null, if value not available
     * @template T
     * @param {?} id
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.getFilterValue = /**
     * Get filter value, return null, if value not available
     * @template T
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (this.filtersQuery.hasEntity(id)) {
            /** @type {?} */
            var entity = this.filtersQuery.getEntity(id);
            return entity.value ? entity.value : null;
        }
        return null;
    };
    /**
     * Get filter value, return null, if value not available
     */
    /**
     * Get filter value, return null, if value not available
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.getSortValue = /**
     * Get filter value, return null, if value not available
     * @return {?}
     */
    function () {
        /** @type {?} */
        var state = this.filtersQuery.getValue();
        return state.sort ? state.sort : null;
    };
    /**
     * Select Sort by value
     */
    /**
     * Select Sort by value
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.selectSortBy = /**
     * Select Sort by value
     * @return {?}
     */
    function () {
        return this._selectSortBy$;
    };
    /**
     * Set orderBy
     */
    /**
     * Set orderBy
     * @param {?} order
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.setSortBy = /**
     * Set orderBy
     * @param {?} order
     * @return {?}
     */
    function (order) {
        this.filtersStore.update({ sort: order });
    };
    /**
     * Get the filters normalized as key value or as query params.
     * This can be useful for server-side filtering
     */
    /**
     * Get the filters normalized as key value or as query params.
     * This can be useful for server-side filtering
     * @param {?=} options
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.getNormalizedFilters = /**
     * Get the filters normalized as key value or as query params.
     * This can be useful for server-side filtering
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var e_1, _a;
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var result = {};
        options = __assign({ sortByKey: 'sortBy', sortByOrderKey: 'sortByOrder' }, options);
        try {
            for (var _b = __values(this.getServerFilters()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var filter = _c.value;
                result[filter.id] = filter.value;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (options.withSort) {
            /** @type {?} */
            var sort = this.getSortValue();
            result[options.sortByKey] = sort.sortBy;
            result[options.sortByOrderKey] = sort.sortByOrder;
        }
        if (options.asQueryParams) {
            return this._serialize(result);
        }
        return result;
    };
    /**
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.clearFilters();
    };
    /** This method is responsible for getting access to the query. */
    /**
     * This method is responsible for getting access to the query.
     * @protected
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.getQuery = /**
     * This method is responsible for getting access to the query.
     * @protected
     * @return {?}
     */
    function () {
        return this.query;
    };
    /** This method is responsible for getting access to the store. */
    /**
     * This method is responsible for getting access to the store.
     * @protected
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.getStore = /**
     * This method is responsible for getting access to the store.
     * @protected
     * @return {?}
     */
    function () {
        return this.getQuery().__store__;
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    AkitaFiltersPlugin.prototype._serialize = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return Object.keys(obj)
            .map((/**
         * @param {?} k
         * @return {?}
         */
        function (k) { return encodeURIComponent(k) + "=" + encodeURIComponent(obj[k]); }))
            .join('&');
    };
    /**
     * @private
     * @param {?} entities
     * @param {?} filters
     * @param {?} sort
     * @return {?}
     */
    AkitaFiltersPlugin.prototype._applyFiltersForArray = /**
     * @private
     * @param {?} entities
     * @param {?} filters
     * @param {?} sort
     * @return {?}
     */
    function (entities, filters, sort) {
        /** @type {?} */
        var entitiesFiltered = entities;
        if (filters.length !== 0) {
            entitiesFiltered = entities.filter((/**
             * @param {?} entity
             * @param {?} index
             * @param {?} array
             * @return {?}
             */
            function (entity, index, array) {
                return filters.every((/**
                 * @param {?} filter
                 * @return {?}
                 */
                function (filter) {
                    if (filter.predicate) {
                        return !!filter.predicate(entity, index, array, filter);
                    }
                    return true;
                }));
            }));
        }
        if (sort && sort.sortBy) {
            /** @type {?} */
            var _sortBy_1 = isFunction(sort.sortBy) ? sort.sortBy : compareValues(sort.sortBy, sort.sortByOrder);
            entitiesFiltered = __spread(entitiesFiltered.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) { return _sortBy_1(a, b, entities); })));
        }
        return entitiesFiltered;
    };
    /**
     * @private
     * @param {?} entities
     * @param {?} filters
     * @return {?}
     */
    AkitaFiltersPlugin.prototype._applyFiltersForHashMap = /**
     * @private
     * @param {?} entities
     * @param {?} filters
     * @return {?}
     */
    function (entities, filters) {
        var _this = this;
        if (filters.length === 0) {
            return entities;
        }
        /** @type {?} */
        var hashMapFiltered = {};
        Object.keys(entities).forEach((/**
         * @param {?} entityKey
         * @param {?} index
         * @return {?}
         */
        function (entityKey, index) {
            /** @type {?} */
            var entity = (/** @type {?} */ (entities[entityKey]));
            if (_this._applyFiltersForOneEntity(filters, entity, index, entities)) {
                hashMapFiltered[entityKey] = entity;
            }
        }));
        return hashMapFiltered;
    };
    /**
     * @private
     * @param {?} filters
     * @param {?} entity
     * @param {?} index
     * @param {?} array
     * @return {?}
     */
    AkitaFiltersPlugin.prototype._applyFiltersForOneEntity = /**
     * @private
     * @param {?} filters
     * @param {?} entity
     * @param {?} index
     * @param {?} array
     * @return {?}
     */
    function (filters, entity, index, array) {
        return filters.every((/**
         * @param {?} filter
         * @return {?}
         */
        function (filter) {
            if (filter.predicate) {
                return !!filter.predicate(entity, index, array, filter);
            }
            return true;
        }));
    };
    /**
     * @protected
     * @param {?} id
     * @return {?}
     */
    AkitaFiltersPlugin.prototype.instantiatePlugin = /**
     * @protected
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return null;
    };
    return AkitaFiltersPlugin;
}(EntityCollectionPlugin));
if (false) {
    /**
     * @type {?}
     * @private
     */
    AkitaFiltersPlugin.prototype._filtersStore;
    /**
     * @type {?}
     * @private
     */
    AkitaFiltersPlugin.prototype._filtersQuery;
    /**
     * @type {?}
     * @private
     */
    AkitaFiltersPlugin.prototype._server;
    /**
     * @type {?}
     * @private
     */
    AkitaFiltersPlugin.prototype._selectFilters$;
    /**
     * @type {?}
     * @private
     */
    AkitaFiltersPlugin.prototype._selectSortBy$;
    /**
     * @type {?}
     * @private
     */
    AkitaFiltersPlugin.prototype._selectFiltersAll$;
    /**
     * @type {?}
     * @protected
     */
    AkitaFiltersPlugin.prototype.query;
    /**
     * @type {?}
     * @private
     */
    AkitaFiltersPlugin.prototype.params;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template S, E
 */
var  /**
 * @template S, E
 */
AkitaMatDataSource = /** @class */ (function (_super) {
    __extends(AkitaMatDataSource, _super);
    /**
     * Data source to use an Akita EntityStore with a Material table
     * @see : https://material.angular.io/components/table/overview
     *
     * @param query string : [Mandatory] the akita Query Entity, you wan to use to this data source.
     * @param akitaFilters string [Optional] If you want to provide an AkitaFilters that you use externally. Else it will create a new one.
     */
    function AkitaMatDataSource(query, akitaFilters) {
        var _this = _super.call(this) || this;
        _this._paginator = null;
        _this._sort = null;
        /**
         * Used to react to internal changes of the paginator that are made by the data source itself.
         */
        _this._internalPageChanges = new Subject();
        /**
         * Stream emitting render data to the table (depends on ordered data changes).
         */
        _this._renderData = new BehaviorSubject([]);
        /**
         * Used to react to internal changes of the paginator that are made by the data source itself.
         */
        _this._disconnect = new Subject();
        /**
         * Subscription to the changes that should trigger an update to the table's rendered rows, such
         * as filtering, sorting, pagination, or base data changes.
         */
        _this._renderChangesSubscription = Subscription.EMPTY;
        _this._dataQuery = query;
        _this._filters = akitaFilters ? akitaFilters : new AkitaFiltersPlugin(query);
        _this._hasCustomFilters = !!akitaFilters;
        _this._count$ = new BehaviorSubject(0);
        /** @type {?} */
        var count = 0;
        // @ts-ignore ignore, as without options, we will allways have an Array.
        _this._selectAllByFilter$ = _this._filters.selectAllByFilters();
        _this._updateChangeSubscription();
        return _this;
    }
    Object.defineProperty(AkitaMatDataSource.prototype, "filter", {
        /**
         * @param searchQuery teh string use to search
         */
        set: /**
         * @param {?} searchQuery teh string use to search
         * @return {?}
         */
        function (searchQuery) {
            this.search = searchQuery;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AkitaMatDataSource.prototype, "search", {
        /**
         * filter all the list by a search term.
         *
         * use like a property :
         * akitaMatDataSourceInstance.search = 'term';
         * @param searchQuery the string use to search
         */
        set: /**
         * filter all the list by a search term.
         *
         * use like a property :
         * akitaMatDataSourceInstance.search = 'term';
         * @param {?} searchQuery the string use to search
         * @return {?}
         */
        function (searchQuery) {
            if (searchQuery === '') {
                this._filters.removeFilter('search');
            }
            else {
                this._filters.setFilter({ id: 'search', value: searchQuery });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AkitaMatDataSource.prototype, "sort", {
        /**
         * Instance of the MatSort directive used by the table to control its sorting. Sort changes
         * emitted by the MatSort will trigger an update to the table's rendered data.
         */
        set: /**
         * Instance of the MatSort directive used by the table to control its sorting. Sort changes
         * emitted by the MatSort will trigger an update to the table's rendered data.
         * @param {?} sort
         * @return {?}
         */
        function (sort) {
            var _this = this;
            this._sort = sort;
            sort.sortChange.pipe(takeUntil(this._disconnect)).subscribe((/**
             * @param {?} sortValue
             * @return {?}
             */
            function (sortValue) {
                _this._filters.setSortBy({
                    sortBy: (/** @type {?} */ (sortValue.active)),
                    sortByOrder: sortValue.direction === 'desc' ? Order.DESC : Order.ASC
                });
            }));
            sort.initialized.subscribe((/**
             * @return {?}
             */
            function () {
                _this.setDefaultSort((/** @type {?} */ (sort.active)), sort.direction === 'desc' ? Order.DESC : Order.ASC);
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AkitaMatDataSource.prototype, "paginator", {
        /**
         * Instance of the MatPaginator component used by the table to control what page of the data is
         * displayed. Page changes emitted by the MatPaginator will trigger an update to the
         * table's rendered data.
         *
         * Note that the data source uses the paginator's properties to calculate which page of data
         * should be displayed. If the paginator receives its properties as template inputs,
         * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been
         * initialized before assigning it to this data source.
         */
        get: /**
         * Instance of the MatPaginator component used by the table to control what page of the data is
         * displayed. Page changes emitted by the MatPaginator will trigger an update to the
         * table's rendered data.
         *
         * Note that the data source uses the paginator's properties to calculate which page of data
         * should be displayed. If the paginator receives its properties as template inputs,
         * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been
         * initialized before assigning it to this data source.
         * @return {?}
         */
        function () {
            return this._paginator;
        },
        set: /**
         * @param {?} paginator
         * @return {?}
         */
        function (paginator) {
            this._paginator = paginator;
            this._updateChangeSubscription();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AkitaMatDataSource.prototype, "AkitaFilters", {
        /**
         * @deprecated use get akitaFiltersPlugin
         */
        get: /**
         * @deprecated use get akitaFiltersPlugin
         * @return {?}
         */
        function () {
            return this._filters;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AkitaMatDataSource.prototype, "akitaFiltersPlugIn", {
        /**
         * Access to AkitaFiltersPlugins, usefull to interact with all filters
         */
        get: /**
         * Access to AkitaFiltersPlugins, usefull to interact with all filters
         * @return {?}
         */
        function () {
            return this._filters;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    AkitaMatDataSource.prototype._updateCount = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var count = value.length ? value.length : 0;
        if (count !== this._count$.getValue()) {
            this._count$.next(count);
            this._updatePaginator(count);
        }
    };
    /**
     * Paginate the data (client-side). If you're using server-side pagination,
     * this would be replaced by requesting the appropriate data from the server.
     */
    /**
     * Paginate the data (client-side). If you're using server-side pagination,
     * this would be replaced by requesting the appropriate data from the server.
     * @private
     * @param {?} data
     * @return {?}
     */
    AkitaMatDataSource.prototype._pageData = /**
     * Paginate the data (client-side). If you're using server-side pagination,
     * this would be replaced by requesting the appropriate data from the server.
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this._updateCount(data);
        if (!this.paginator) {
            return data;
        }
        /** @type {?} */
        var startIndex = this.paginator.pageIndex * this.paginator.pageSize;
        return data.slice(startIndex, startIndex + this.paginator.pageSize);
    };
    /**
     *  add a filter to filters plugins
     */
    /**
     *  add a filter to filters plugins
     * @param {?} filter
     * @return {?}
     */
    AkitaMatDataSource.prototype.addFilter = /**
     *  add a filter to filters plugins
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        this._filters.setFilter(filter);
    };
    /**
     *  add a filter to filters plugins
     */
    /**
     *  add a filter to filters plugins
     * @param {?} filter
     * @return {?}
     */
    AkitaMatDataSource.prototype.setFilter = /**
     *  add a filter to filters plugins
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        this._filters.setFilter(filter);
    };
    /**
     * Remove a AkitaFilter
     */
    /**
     * Remove a AkitaFilter
     * @param {?} id
     * @return {?}
     */
    AkitaMatDataSource.prototype.removeFilter = /**
     * Remove a AkitaFilter
     * @param {?} id
     * @return {?}
     */
    function (id) {
        this._filters.removeFilter(id);
    };
    /**
     * Clear all filters
     */
    /**
     * Clear all filters
     * @return {?}
     */
    AkitaMatDataSource.prototype.clearFilters = /**
     * Clear all filters
     * @return {?}
     */
    function () {
        this._filters.clearFilters();
    };
    /**
     * Get filter value, return null, if value not available
     */
    /**
     * Get filter value, return null, if value not available
     * @template V
     * @param {?} id
     * @return {?}
     */
    AkitaMatDataSource.prototype.getFilterValue = /**
     * Get filter value, return null, if value not available
     * @template V
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this._filters.getFilterValue(id);
    };
    /**
     * Set the default sort
     * @param sortColumn the colum name present in your object
     * @param direction string the direction for sorting (asc or desc). Default asc.
     */
    /**
     * Set the default sort
     * @param {?} sortColumn the colum name present in your object
     * @param {?=} direction string the direction for sorting (asc or desc). Default asc.
     * @return {?}
     */
    AkitaMatDataSource.prototype.setDefaultSort = /**
     * Set the default sort
     * @param {?} sortColumn the colum name present in your object
     * @param {?=} direction string the direction for sorting (asc or desc). Default asc.
     * @return {?}
     */
    function (sortColumn, direction) {
        if (direction === void 0) { direction = 'asc'; }
        this._filters.setSortBy({
            sortBy: sortColumn,
            sortByOrder: direction === 'desc' ? Order.DESC : Order.ASC
        });
    };
    /**
     * Select Count filtered results.
     */
    /**
     * Select Count filtered results.
     * @return {?}
     */
    AkitaMatDataSource.prototype.selectCount = /**
     * Select Count filtered results.
     * @return {?}
     */
    function () {
        return this._count$.asObservable();
    };
    /**
     * Select Count filtered results.
     */
    /**
     * Select Count filtered results.
     * @return {?}
     */
    AkitaMatDataSource.prototype.getCount = /**
     * Select Count filtered results.
     * @return {?}
     */
    function () {
        return this._count$.getValue();
    };
    /**
     * Subscribe to changes that should trigger an update to the table's rendered rows. When the
     * changes occur, process the current state of the filter, sort, and pagination along with
     * the provided base data and send it to the table for rendering.
     */
    /**
     * Subscribe to changes that should trigger an update to the table's rendered rows. When the
     * changes occur, process the current state of the filter, sort, and pagination along with
     * the provided base data and send it to the table for rendering.
     * @return {?}
     */
    AkitaMatDataSource.prototype._updateChangeSubscription = /**
     * Subscribe to changes that should trigger an update to the table's rendered rows. When the
     * changes occur, process the current state of the filter, sort, and pagination along with
     * the provided base data and send it to the table for rendering.
     * @return {?}
     */
    function () {
        // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.
        // The events should emit whenever the component emits a change or initializes, or if no
        // component is provided, a stream with just a null event should be provided.
        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the
        // pipeline can progress to the next step. Note that the value from these streams are not used,
        // they purely act as a signal to progress in the pipeline.
        var _this = this;
        // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.
        // The events should emit whenever the component emits a change or initializes, or if no
        // component is provided, a stream with just a null event should be provided.
        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the
        // pipeline can progress to the next step. Note that the value from these streams are not used,
        // they purely act as a signal to progress in the pipeline.
        /** @type {?} */
        var pageChange = this._paginator ?
            (/** @type {?} */ (merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized))) :
            of(null);
        /** @type {?} */
        var paginatedData = combineLatest(this._selectAllByFilter$, pageChange)
            .pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = __read(_a, 1), data = _b[0];
            return _this._pageData(data);
        })));
        // Watched for paged data changes and send the result to the table to render.
        this._renderChangesSubscription.unsubscribe();
        this._renderChangesSubscription = paginatedData.pipe(takeUntil(this._disconnect)).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return _this._renderData.next(data); }));
        this._internalPageChanges.next();
    };
    /**
     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page
     * index does not exceed the paginator's last page. Values are changed in a resolved promise to
     * guard against making property changes within a round of change detection.
     */
    /**
     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page
     * index does not exceed the paginator's last page. Values are changed in a resolved promise to
     * guard against making property changes within a round of change detection.
     * @param {?} filteredDataLength
     * @return {?}
     */
    AkitaMatDataSource.prototype._updatePaginator = /**
     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page
     * index does not exceed the paginator's last page. Values are changed in a resolved promise to
     * guard against making property changes within a round of change detection.
     * @param {?} filteredDataLength
     * @return {?}
     */
    function (filteredDataLength) {
        var _this = this;
        Promise.resolve().then((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var paginator = _this.paginator;
            if (!paginator) {
                return;
            }
            paginator.length = filteredDataLength;
            // If the page index is set beyond the page, reduce it to the last page.
            if (paginator.pageIndex > 0) {
                /** @type {?} */
                var lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;
                /** @type {?} */
                var newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);
                if (newPageIndex !== paginator.pageIndex) {
                    paginator.pageIndex = newPageIndex;
                    // Since the paginator only emits after user-generated changes,
                    // we need our own stream so we know to should re-render the data.
                    _this._internalPageChanges.next();
                }
            }
        }));
    };
    /**
     * Function used by matTable to subscribe to the data
     */
    /**
     * Function used by matTable to subscribe to the data
     * @return {?}
     */
    AkitaMatDataSource.prototype.connect = /**
     * Function used by matTable to subscribe to the data
     * @return {?}
     */
    function () {
        return this._renderData;
    };
    /**
     * Used by the MatTable. Called when it is destroyed. No-op.
     * @docs-private
     */
    /**
     * Used by the MatTable. Called when it is destroyed. No-op.
     * \@docs-private
     * @return {?}
     */
    AkitaMatDataSource.prototype.disconnect = /**
     * Used by the MatTable. Called when it is destroyed. No-op.
     * \@docs-private
     * @return {?}
     */
    function () {
        if (!this._hasCustomFilters) {
            this._filters.clearFilters();
            this._filters.destroy();
        }
        this._disconnect.next();
        this._disconnect.complete();
    };
    return AkitaMatDataSource;
}(DataSource));
if (false) {
    /**
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._dataQuery;
    /**
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._filters;
    /**
     * if set a custom filter plugins, do not delete all in disconnect() *
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._hasCustomFilters;
    /**
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._paginator;
    /**
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._sort;
    /**
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._selectAllByFilter$;
    /**
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._count$;
    /**
     * Used to react to internal changes of the paginator that are made by the data source itself.
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._internalPageChanges;
    /**
     * Stream emitting render data to the table (depends on ordered data changes).
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._renderData;
    /**
     * Used to react to internal changes of the paginator that are made by the data source itself.
     * @type {?}
     * @private
     */
    AkitaMatDataSource.prototype._disconnect;
    /**
     * Subscription to the changes that should trigger an update to the table's rendered rows, such
     * as filtering, sorting, pagination, or base data changes.
     * @type {?}
     */
    AkitaMatDataSource.prototype._renderChangesSubscription;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AkitaFiltersPlugin, AkitaFiltersQuery, AkitaFiltersStore, AkitaMatDataSource, createFilter, defaultFilter, searchFilter, searchFilterIn };
//# sourceMappingURL=akita-filters-plugin.js.map
